
Usonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800200  00001a86  00001b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026c  0080040c  0080040c  00001d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000673d  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002475  00000000  00000000  0000892d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027f7  00000000  00000000  0000ada2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001070  00000000  00000000  0000d59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b4f  00000000  00000000  0000e60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051a4  00000000  00000000  0001015b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  000152ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	75 c0       	rjmp	.+234    	; 0xec <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c0       	rjmp	.+290    	; 0x14c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c0       	rjmp	.+286    	; 0x14c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c0       	rjmp	.+238    	; 0x14c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c0       	rjmp	.+186    	; 0x14c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c0       	rjmp	.+158    	; 0x14c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c0       	rjmp	.+154    	; 0x14c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c0       	rjmp	.+150    	; 0x14c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c0       	rjmp	.+146    	; 0x14c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c0       	rjmp	.+142    	; 0x14c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c0       	rjmp	.+138    	; 0x14c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c0       	rjmp	.+134    	; 0x14c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c0       	rjmp	.+130    	; 0x14c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3f c0       	rjmp	.+126    	; 0x14c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3d c0       	rjmp	.+122    	; 0x14c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3b c0       	rjmp	.+118    	; 0x14c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	39 c0       	rjmp	.+114    	; 0x14c <__bad_interrupt>
      da:	00 00       	nop
      dc:	37 c0       	rjmp	.+110    	; 0x14c <__bad_interrupt>
      de:	00 00       	nop
      e0:	35 c0       	rjmp	.+106    	; 0x14c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	b4 00       	.word	0x00b4	; ????
      e6:	a7 0c       	add	r10, r7
      e8:	bb 0c       	add	r11, r11
      ea:	d8 0c       	add	r13, r8

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d1 e2       	ldi	r29, 0x21	; 33
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
      fc:	14 e0       	ldi	r17, 0x04	; 4
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	e6 e8       	ldi	r30, 0x86	; 134
     104:	fa e1       	ldi	r31, 0x1A	; 26
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	ac 30       	cpi	r26, 0x0C	; 12
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	26 e0       	ldi	r18, 0x06	; 6
     118:	ac e0       	ldi	r26, 0x0C	; 12
     11a:	b4 e0       	ldi	r27, 0x04	; 4
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a8 37       	cpi	r26, 0x78	; 120
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	c6 e7       	ldi	r28, 0x76	; 118
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	06 c0       	rjmp	.+12     	; 0x13c <__do_global_ctors+0x16>
     130:	21 97       	sbiw	r28, 0x01	; 1
     132:	01 09       	sbc	r16, r1
     134:	80 2f       	mov	r24, r16
     136:	fe 01       	movw	r30, r28
     138:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__tablejump2__>
     13c:	c2 37       	cpi	r28, 0x72	; 114
     13e:	d1 07       	cpc	r29, r17
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	08 07       	cpc	r16, r24
     144:	a9 f7       	brne	.-22     	; 0x130 <__do_global_ctors+0xa>
     146:	18 d0       	rcall	.+48     	; 0x178 <main>
     148:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <_ZN6DS3231C1Ev>:
	  Currenttime[9] = ':';
	  Currenttime[10] = (char)second;

	  //sprintf(Currenttime,"%d.%d.%d %d:%d:%d", year, month, day, hour, minute, second);
	  return Currenttime;
     14e:	10 d0       	rcall	.+32     	; 0x170 <i2c_init>
     150:	85 e3       	ldi	r24, 0x35	; 53
     152:	8a 95       	dec	r24
     154:	f1 f7       	brne	.-4      	; 0x152 <_ZN6DS3231C1Ev+0x4>
     156:	00 00       	nop
     158:	5a 9a       	sbi	0x0b, 2	; 11
     15a:	e9 e6       	ldi	r30, 0x69	; 105
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 62       	ori	r24, 0x20	; 32
     162:	80 83       	st	Z, r24
     164:	ea 9a       	sbi	0x1d, 2	; 29
     166:	08 95       	ret

00000168 <_GLOBAL__sub_I_rtc>:

extern "C" {
	#include "../I2C_MASTER/i2c_master.h"
};

DS3231 rtc;
     168:	8c e0       	ldi	r24, 0x0C	; 12
     16a:	94 e0       	ldi	r25, 0x04	; 4
     16c:	f0 cf       	rjmp	.-32     	; 0x14e <_ZN6DS3231C1Ev>
     16e:	08 95       	ret

00000170 <i2c_init>:



void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
     170:	88 e4       	ldi	r24, 0x48	; 72
     172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     176:	08 95       	ret

00000178 <main>:
////
//Servo serv;
//DistanceLaser laser;
using namespace std;
int main(void)
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	2c 97       	sbiw	r28, 0x0c	; 12
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
	//
	/*/////////////////////////////////////////////////////////////////////////////
	//SDCard
	/////////////////////////////////////////////////////////////////////////////*/
	//
	GenericData gd;
     18c:	ce 01       	movw	r24, r28
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	28 d1       	rcall	.+592    	; 0x3e2 <_ZN11GenericDataC1Ev>
	gd.initSDCard();
     192:	01 d0       	rcall	.+2      	; 0x196 <_ZN11DataManager10initSDCardEv>
     194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x1c>

00000196 <_ZN11DataManager10initSDCardEv>:
     196:	0e 94 67 0c 	call	0x18ce	; 0x18ce <uinit>
{

}

ErrorData::ErrorData() :
	DataManager(getFilePath(), getKeys())
     19a:	0e 94 2d 0b 	call	0x165a	; 0x165a <mmc_init>
     19e:	88 23       	and	r24, r24
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <_ZN11DataManager10initSDCardEv+0x12>
     1a2:	25 d7       	rcall	.+3658   	; 0xfee <fat_loadFatData>
     1a4:	81 11       	cpse	r24, r1
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <_ZN11DataManager10initSDCardEv+0x1e>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	08 95       	ret
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	08 95       	ret

000001b8 <_ZN11DataManager10fileExistsEv>:
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	ec 01       	movw	r28, r24
     1be:	87 e2       	ldi	r24, 0x27	; 39
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     1c6:	62 e7       	ldi	r22, 0x72	; 114
     1c8:	88 81       	ld	r24, Y
     1ca:	99 81       	ldd	r25, Y+1	; 0x01
     1cc:	c3 d7       	rcall	.+3974   	; 0x1154 <ffopen>
     1ce:	81 11       	cpse	r24, r1
     1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <_ZN11DataManager10fileExistsEv+0x2a>
     1d2:	8a e3       	ldi	r24, 0x3A	; 58
     1d4:	92 e0       	ldi	r25, 0x02	; 2
     1d6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     1da:	0e 94 a8 09 	call	0x1350	; 0x1350 <ffclose>
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <_ZN11DataManager10fileExistsEv+0x2c>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <_ZN11DataManager9writeDataEPc>:
     1ea:	6f 92       	push	r6
     1ec:	7f 92       	push	r7
     1ee:	8f 92       	push	r8
     1f0:	9f 92       	push	r9
     1f2:	af 92       	push	r10
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	2b 97       	sbiw	r28, 0x0b	; 11
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	5c 01       	movw	r10, r24
     218:	8b 01       	movw	r16, r22
     21a:	8d b6       	in	r8, 0x3d	; 61
     21c:	9e b6       	in	r9, 0x3e	; 62
     21e:	fb 01       	movw	r30, r22
     220:	01 90       	ld	r0, Z+
     222:	00 20       	and	r0, r0
     224:	e9 f7       	brne	.-6      	; 0x220 <_ZN11DataManager9writeDataEPc+0x36>
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	cf 01       	movw	r24, r30
     22a:	86 1b       	sub	r24, r22
     22c:	97 0b       	sbc	r25, r23
     22e:	2b e0       	ldi	r18, 0x0B	; 11
     230:	ec ee       	ldi	r30, 0xEC	; 236
     232:	f3 e0       	ldi	r31, 0x03	; 3
     234:	de 01       	movw	r26, r28
     236:	11 96       	adiw	r26, 0x01	; 1
     238:	01 90       	ld	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	2a 95       	dec	r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <_ZN11DataManager9writeDataEPc+0x4e>
     240:	f5 01       	movw	r30, r10
     242:	22 81       	ldd	r18, Z+2	; 0x02
     244:	33 81       	ldd	r19, Z+3	; 0x03
     246:	62 17       	cp	r22, r18
     248:	73 07       	cpc	r23, r19
     24a:	a1 f1       	breq	.+104    	; 0x2b4 <_ZN11DataManager9writeDataEPc+0xca>
     24c:	9e 01       	movw	r18, r28
     24e:	2f 5f       	subi	r18, 0xFF	; 255
     250:	3f 4f       	sbci	r19, 0xFF	; 255
     252:	69 01       	movw	r12, r18
     254:	f9 01       	movw	r30, r18
     256:	01 90       	ld	r0, Z+
     258:	00 20       	and	r0, r0
     25a:	e9 f7       	brne	.-6      	; 0x256 <_ZN11DataManager9writeDataEPc+0x6c>
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	af 01       	movw	r20, r30
     260:	42 1b       	sub	r20, r18
     262:	53 0b       	sbc	r21, r19
     264:	fb 01       	movw	r30, r22
     266:	01 90       	ld	r0, Z+
     268:	00 20       	and	r0, r0
     26a:	e9 f7       	brne	.-6      	; 0x266 <_ZN11DataManager9writeDataEPc+0x7c>
     26c:	31 97       	sbiw	r30, 0x01	; 1
     26e:	e6 1b       	sub	r30, r22
     270:	f7 0b       	sbc	r31, r23
     272:	4e 0f       	add	r20, r30
     274:	5f 1f       	adc	r21, r31
     276:	4f 5f       	subi	r20, 0xFF	; 255
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	8d b7       	in	r24, 0x3d	; 61
     27c:	9e b7       	in	r25, 0x3e	; 62
     27e:	84 1b       	sub	r24, r20
     280:	95 0b       	sbc	r25, r21
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	9e bf       	out	0x3e, r25	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	8d bf       	out	0x3d, r24	; 61
     28c:	ed b7       	in	r30, 0x3d	; 61
     28e:	fe b7       	in	r31, 0x3e	; 62
     290:	31 96       	adiw	r30, 0x01	; 1
     292:	7f 01       	movw	r14, r30
     294:	6e 2e       	mov	r6, r30
     296:	7f 2c       	mov	r7, r15
     298:	64 ea       	ldi	r22, 0xA4	; 164
     29a:	73 e0       	ldi	r23, 0x03	; 3
     29c:	cf 01       	movw	r24, r30
     29e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strncpy>
     2a2:	b6 01       	movw	r22, r12
     2a4:	c7 01       	movw	r24, r14
     2a6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <strcat>
     2aa:	b8 01       	movw	r22, r16
     2ac:	c7 01       	movw	r24, r14
     2ae:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <strcat>
     2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <_ZN11DataManager9writeDataEPc+0xea>
     2b4:	2d b7       	in	r18, 0x3d	; 61
     2b6:	3e b7       	in	r19, 0x3e	; 62
     2b8:	28 1b       	sub	r18, r24
     2ba:	39 0b       	sbc	r19, r25
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	3e bf       	out	0x3e, r19	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	2d bf       	out	0x3d, r18	; 61
     2c6:	8d b7       	in	r24, 0x3d	; 61
     2c8:	9e b7       	in	r25, 0x3e	; 62
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	68 2e       	mov	r6, r24
     2ce:	79 2e       	mov	r7, r25
     2d0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <strcat>
     2d4:	8b e4       	ldi	r24, 0x4B	; 75
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     2dc:	62 e7       	ldi	r22, 0x72	; 114
     2de:	f5 01       	movw	r30, r10
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	37 d7       	rcall	.+3694   	; 0x1154 <ffopen>
     2e6:	89 e6       	ldi	r24, 0x69	; 105
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     2ee:	60 91 69 06 	lds	r22, 0x0669	; 0x800669 <file+0xa>
     2f2:	70 91 6a 06 	lds	r23, 0x066A	; 0x80066a <file+0xb>
     2f6:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <file+0xc>
     2fa:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <file+0xd>
     2fe:	0e 94 b3 09 	call	0x1366	; 0x1366 <ffseek>
     302:	80 e9       	ldi	r24, 0x90	; 144
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     30a:	86 2d       	mov	r24, r6
     30c:	97 2d       	mov	r25, r7
     30e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <ffwrites>
     312:	8d e0       	ldi	r24, 0x0D	; 13
     314:	0e 94 25 0a 	call	0x144a	; 0x144a <ffwrite>
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	0e 94 25 0a 	call	0x144a	; 0x144a <ffwrite>
     31e:	87 eb       	ldi	r24, 0xB7	; 183
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     326:	0e 94 a8 09 	call	0x1350	; 0x1350 <ffclose>
     32a:	8f ed       	ldi	r24, 0xDF	; 223
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	9e be       	out	0x3e, r9	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	8d be       	out	0x3d, r8	; 61
     33c:	2b 96       	adiw	r28, 0x0b	; 11
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	08 95       	ret

00000366 <_ZN11DataManager8initFileEv>:
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ec 01       	movw	r28, r24
     36c:	25 df       	rcall	.-438    	; 0x1b8 <_ZN11DataManager10fileExistsEv>
     36e:	81 11       	cpse	r24, r1
     370:	19 c0       	rjmp	.+50     	; 0x3a4 <_ZN11DataManager8initFileEv+0x3e>
     372:	8c ef       	ldi	r24, 0xFC	; 252
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     37a:	88 81       	ld	r24, Y
     37c:	99 81       	ldd	r25, Y+1	; 0x01
     37e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     382:	63 e6       	ldi	r22, 0x63	; 99
     384:	88 81       	ld	r24, Y
     386:	99 81       	ldd	r25, Y+1	; 0x01
     388:	e5 d6       	rcall	.+3530   	; 0x1154 <ffopen>
     38a:	e2 d7       	rcall	.+4036   	; 0x1350 <ffclose>
     38c:	83 e1       	ldi	r24, 0x13	; 19
     38e:	93 e0       	ldi	r25, 0x03	; 3
     390:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     394:	6a 81       	ldd	r22, Y+2	; 0x02
     396:	7b 81       	ldd	r23, Y+3	; 0x03
     398:	ce 01       	movw	r24, r28
     39a:	27 df       	rcall	.-434    	; 0x1ea <_ZN11DataManager9writeDataEPc>
     39c:	8b e2       	ldi	r24, 0x2B	; 43
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <_ZN11DataManagerC1EPhS0_>:
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	ec 01       	movw	r28, r24
     3b0:	79 83       	std	Y+1, r23	; 0x01
     3b2:	68 83       	st	Y, r22
     3b4:	5b 83       	std	Y+3, r21	; 0x03
     3b6:	4a 83       	std	Y+2, r20	; 0x02
     3b8:	1c 82       	std	Y+4, r1	; 0x04
     3ba:	1d 82       	std	Y+5, r1	; 0x05
     3bc:	1e 82       	std	Y+6, r1	; 0x06
     3be:	1f 82       	std	Y+7, r1	; 0x07
     3c0:	18 86       	std	Y+8, r1	; 0x08
     3c2:	19 86       	std	Y+9, r1	; 0x09
     3c4:	1a 86       	std	Y+10, r1	; 0x0a
     3c6:	1b 86       	std	Y+11, r1	; 0x0b
     3c8:	82 e4       	ldi	r24, 0x42	; 66
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     3d0:	88 81       	ld	r24, Y
     3d2:	99 81       	ldd	r25, Y+1	; 0x01
     3d4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uputs>
     3d8:	ce 01       	movw	r24, r28
     3da:	c5 df       	rcall	.-118    	; 0x366 <_ZN11DataManager8initFileEv>
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <_ZN11GenericDataC1Ev>:
{

}

GenericData::GenericData() :
	DataManager(getFilePath(), getKeys())
     3e2:	4a e8       	ldi	r20, 0x8A	; 138
     3e4:	53 e0       	ldi	r21, 0x03	; 3
     3e6:	65 e0       	ldi	r22, 0x05	; 5
     3e8:	74 e0       	ldi	r23, 0x04	; 4
     3ea:	df cf       	rjmp	.-66     	; 0x3aa <_ZN11DataManagerC1EPhS0_>
     3ec:	08 95       	ret

000003ee <fat_writeSector>:
	 nextCluster = fat_getNextCluster(startCluster);
	 fat_setCluster(startCluster,0x00000000);  	
  }while(!((nextCluster>=0x0ffffff8&&fat.fatType==32)||(nextCluster>=0xfff8&&fat.fatType==16)));

  fat_writeSector(file.currentSectorNr);
}
     3ee:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <fat+0x4>
     3f2:	45 e5       	ldi	r20, 0x55	; 85
     3f4:	54 e0       	ldi	r21, 0x04	; 4
     3f6:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <mmc_write_sector>
     3fa:	08 95       	ret

000003fc <fat_loadSector>:
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	00 91 65 06 	lds	r16, 0x0665	; 0x800665 <file+0x6>
     410:	10 91 66 06 	lds	r17, 0x0666	; 0x800666 <file+0x7>
     414:	20 91 67 06 	lds	r18, 0x0667	; 0x800667 <file+0x8>
     418:	30 91 68 06 	lds	r19, 0x0668	; 0x800668 <file+0x9>
     41c:	06 17       	cp	r16, r22
     41e:	17 07       	cpc	r17, r23
     420:	28 07       	cpc	r18, r24
     422:	39 07       	cpc	r19, r25
     424:	31 f1       	breq	.+76     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     426:	6b 01       	movw	r12, r22
     428:	7c 01       	movw	r14, r24
     42a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <fat+0x4>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	41 f4       	brne	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     432:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <fat+0x4>
     436:	45 e5       	ldi	r20, 0x55	; 85
     438:	54 e0       	ldi	r21, 0x04	; 4
     43a:	c9 01       	movw	r24, r18
     43c:	b8 01       	movw	r22, r16
     43e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <mmc_write_sector>
     442:	cf e5       	ldi	r28, 0x5F	; 95
     444:	d6 e0       	ldi	r29, 0x06	; 6
     446:	8e 81       	ldd	r24, Y+6	; 0x06
     448:	9f 81       	ldd	r25, Y+7	; 0x07
     44a:	a8 85       	ldd	r26, Y+8	; 0x08
     44c:	b9 85       	ldd	r27, Y+9	; 0x09
     44e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <fat>
     452:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <fat+0x1>
     456:	a0 93 3f 04 	sts	0x043F, r26	; 0x80043f <fat+0x2>
     45a:	b0 93 40 04 	sts	0x0440, r27	; 0x800440 <fat+0x3>
     45e:	45 e5       	ldi	r20, 0x55	; 85
     460:	54 e0       	ldi	r21, 0x04	; 4
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 20 0c 	call	0x1840	; 0x1840 <mmc_read_sector>
     46a:	ce 82       	std	Y+6, r12	; 0x06
     46c:	df 82       	std	Y+7, r13	; 0x07
     46e:	e8 86       	std	Y+8, r14	; 0x08
     470:	f9 86       	std	Y+9, r15	; 0x09
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	08 95       	ret

00000486 <fat_getFreeRowsOfCluster>:
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	6b 01       	movw	r12, r22
     498:	7c 01       	movw	r14, r24
     49a:	c4 2f       	mov	r28, r20
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	0d e3       	ldi	r16, 0x3D	; 61
     4a0:	14 e0       	ldi	r17, 0x04	; 4
     4a2:	c7 01       	movw	r24, r14
     4a4:	b6 01       	movw	r22, r12
     4a6:	6d 0f       	add	r22, r29
     4a8:	71 1d       	adc	r23, r1
     4aa:	81 1d       	adc	r24, r1
     4ac:	91 1d       	adc	r25, r1
     4ae:	a6 df       	rcall	.-180    	; 0x3fc <fat_loadSector>
     4b0:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <match.1965>
     4b4:	e5 e5       	ldi	r30, 0x55	; 85
     4b6:	f4 e0       	ldi	r31, 0x04	; 4
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	20 81       	ld	r18, Z
     4be:	22 23       	and	r18, r18
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <fat_getFreeRowsOfCluster+0x40>
     4c2:	25 3e       	cpi	r18, 0xE5	; 229
     4c4:	89 f4       	brne	.+34     	; 0x4e8 <fat_getFreeRowsOfCluster+0x62>
     4c6:	3f 5f       	subi	r19, 0xFF	; 255
     4c8:	3c 13       	cpse	r19, r28
     4ca:	0f c0       	rjmp	.+30     	; 0x4ea <fat_getFreeRowsOfCluster+0x64>
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	92 95       	swap	r25
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	89 27       	eor	r24, r25
     4d8:	9f 70       	andi	r25, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <file+0x10>
     4e0:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <match.1965>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <fat_getFreeRowsOfCluster+0x80>
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	80 96       	adiw	r24, 0x20	; 32
     4ec:	b0 96       	adiw	r30, 0x20	; 32
     4ee:	81 15       	cp	r24, r1
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	92 07       	cpc	r25, r18
     4f4:	19 f7       	brne	.-58     	; 0x4bc <fat_getFreeRowsOfCluster+0x36>
     4f6:	30 93 0e 04 	sts	0x040E, r19	; 0x80040e <match.1965>
     4fa:	df 5f       	subi	r29, 0xFF	; 255
     4fc:	f8 01       	movw	r30, r16
     4fe:	85 89       	ldd	r24, Z+21	; 0x15
     500:	d8 17       	cp	r29, r24
     502:	78 f2       	brcs	.-98     	; 0x4a2 <fat_getFreeRowsOfCluster+0x1c>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <fat_clustToSec>:
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	22 50       	subi	r18, 0x02	; 2
     522:	31 09       	sbc	r19, r1
     524:	41 09       	sbc	r20, r1
     526:	51 09       	sbc	r21, r1
     528:	ed e3       	ldi	r30, 0x3D	; 61
     52a:	f4 e0       	ldi	r31, 0x04	; 4
     52c:	a5 89       	ldd	r26, Z+21	; 0x15
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__muluhisi3>
     534:	05 85       	ldd	r16, Z+13	; 0x0d
     536:	16 85       	ldd	r17, Z+14	; 0x0e
     538:	27 85       	ldd	r18, Z+15	; 0x0f
     53a:	30 89       	ldd	r19, Z+16	; 0x10
     53c:	60 0f       	add	r22, r16
     53e:	71 1f       	adc	r23, r17
     540:	82 1f       	adc	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <fat_secToClust>:
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	ed e3       	ldi	r30, 0x3D	; 61
     550:	f4 e0       	ldi	r31, 0x04	; 4
     552:	05 85       	ldd	r16, Z+13	; 0x0d
     554:	16 85       	ldd	r17, Z+14	; 0x0e
     556:	27 85       	ldd	r18, Z+15	; 0x0f
     558:	30 89       	ldd	r19, Z+16	; 0x10
     55a:	60 1b       	sub	r22, r16
     55c:	71 0b       	sbc	r23, r17
     55e:	82 0b       	sbc	r24, r18
     560:	93 0b       	sbc	r25, r19
     562:	25 89       	ldd	r18, Z+21	; 0x15
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__udivmodsi4>
     56e:	ca 01       	movw	r24, r20
     570:	b9 01       	movw	r22, r18
     572:	6e 5f       	subi	r22, 0xFE	; 254
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	8f 4f       	sbci	r24, 0xFF	; 255
     578:	9f 4f       	sbci	r25, 0xFF	; 255
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <fat_loadRowOfSector>:
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	ef e5       	ldi	r30, 0x5F	; 95
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	dc 01       	movw	r26, r24
     58a:	a7 59       	subi	r26, 0x97	; 151
     58c:	bb 4f       	sbci	r27, 0xFB	; 251
     58e:	4d 91       	ld	r20, X+
     590:	5c 91       	ld	r21, X
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	ba 01       	movw	r22, r20
     598:	55 27       	eor	r21, r21
     59a:	44 27       	eor	r20, r20
     59c:	dc 01       	movw	r26, r24
     59e:	a1 59       	subi	r26, 0x91	; 145
     5a0:	bb 4f       	sbci	r27, 0xFB	; 251
     5a2:	0d 91       	ld	r16, X+
     5a4:	1c 91       	ld	r17, X
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 2b       	or	r20, r16
     5ac:	51 2b       	or	r21, r17
     5ae:	62 2b       	or	r22, r18
     5b0:	73 2b       	or	r23, r19
     5b2:	41 8b       	std	Z+17, r20	; 0x11
     5b4:	52 8b       	std	Z+18, r21	; 0x12
     5b6:	63 8b       	std	Z+19, r22	; 0x13
     5b8:	74 8b       	std	Z+20, r23	; 0x14
     5ba:	dc 01       	movw	r26, r24
     5bc:	af 58       	subi	r26, 0x8F	; 143
     5be:	bb 4f       	sbci	r27, 0xFB	; 251
     5c0:	8d 91       	ld	r24, X+
     5c2:	9d 91       	ld	r25, X+
     5c4:	0d 90       	ld	r0, X+
     5c6:	bc 91       	ld	r27, X
     5c8:	a0 2d       	mov	r26, r0
     5ca:	82 87       	std	Z+10, r24	; 0x0a
     5cc:	93 87       	std	Z+11, r25	; 0x0b
     5ce:	a4 87       	std	Z+12, r26	; 0x0c
     5d0:	b5 87       	std	Z+13, r27	; 0x0d
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <fat_loadFileDataFromCluster>:
     5d8:	2f 92       	push	r2
     5da:	3f 92       	push	r3
     5dc:	4f 92       	push	r4
     5de:	5f 92       	push	r5
     5e0:	6f 92       	push	r6
     5e2:	7f 92       	push	r7
     5e4:	8f 92       	push	r8
     5e6:	9f 92       	push	r9
     5e8:	af 92       	push	r10
     5ea:	bf 92       	push	r11
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	2b 01       	movw	r4, r22
     5fe:	3c 01       	movw	r6, r24
     600:	6a 01       	movw	r12, r20
     602:	21 2c       	mov	r2, r1
     604:	45 e5       	ldi	r20, 0x55	; 85
     606:	54 e0       	ldi	r21, 0x04	; 4
     608:	53 01       	movw	r10, r6
     60a:	42 01       	movw	r8, r4
     60c:	82 0c       	add	r8, r2
     60e:	91 1c       	adc	r9, r1
     610:	a1 1c       	adc	r10, r1
     612:	b1 1c       	adc	r11, r1
     614:	c5 01       	movw	r24, r10
     616:	b4 01       	movw	r22, r8
     618:	0e 94 20 0c 	call	0x1840	; 0x1840 <mmc_read_sector>
     61c:	80 92 65 06 	sts	0x0665, r8	; 0x800665 <file+0x6>
     620:	90 92 66 06 	sts	0x0666, r9	; 0x800666 <file+0x7>
     624:	a0 92 67 06 	sts	0x0667, r10	; 0x800667 <file+0x8>
     628:	b0 92 68 06 	sts	0x0668, r11	; 0x800668 <file+0x9>
     62c:	c5 e5       	ldi	r28, 0x55	; 85
     62e:	d4 e0       	ldi	r29, 0x04	; 4
     630:	00 e0       	ldi	r16, 0x00	; 0
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	88 81       	ld	r24, Y
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <fat_loadFileDataFromCluster+0x64>
     63a:	5a c0       	rjmp	.+180    	; 0x6f0 <fat_loadFileDataFromCluster+0x118>
     63c:	9b 85       	ldd	r25, Y+11	; 0x0b
     63e:	90 31       	cpi	r25, 0x10	; 16
     640:	19 f0       	breq	.+6      	; 0x648 <fat_loadFileDataFromCluster+0x70>
     642:	90 32       	cpi	r25, 0x20	; 32
     644:	09 f0       	breq	.+2      	; 0x648 <fat_loadFileDataFromCluster+0x70>
     646:	45 c0       	rjmp	.+138    	; 0x6d2 <fat_loadFileDataFromCluster+0xfa>
     648:	85 3e       	cpi	r24, 0xE5	; 229
     64a:	09 f4       	brne	.+2      	; 0x64e <fat_loadFileDataFromCluster+0x76>
     64c:	42 c0       	rjmp	.+132    	; 0x6d2 <fat_loadFileDataFromCluster+0xfa>
     64e:	31 2c       	mov	r3, r1
     650:	91 2c       	mov	r9, r1
     652:	c8 01       	movw	r24, r16
     654:	83 5c       	subi	r24, 0xC3	; 195
     656:	9b 4f       	sbci	r25, 0xFB	; 251
     658:	7c 01       	movw	r14, r24
     65a:	f7 01       	movw	r30, r14
     65c:	e9 0d       	add	r30, r9
     65e:	f1 1d       	adc	r31, r1
     660:	80 8c       	ldd	r8, Z+24	; 0x18
     662:	90 e2       	ldi	r25, 0x20	; 32
     664:	89 12       	cpse	r8, r25
     666:	02 c0       	rjmp	.+4      	; 0x66c <fat_loadFileDataFromCluster+0x94>
     668:	93 94       	inc	r9
     66a:	15 c0       	rjmp	.+42     	; 0x696 <fat_loadFileDataFromCluster+0xbe>
     66c:	f6 01       	movw	r30, r12
     66e:	e3 0d       	add	r30, r3
     670:	f1 1d       	adc	r31, r1
     672:	80 81       	ld	r24, Z
     674:	8e 32       	cpi	r24, 0x2E	; 46
     676:	29 f4       	brne	.+10     	; 0x682 <fat_loadFileDataFromCluster+0xaa>
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	89 15       	cp	r24, r9
     67c:	78 f4       	brcc	.+30     	; 0x69c <fat_loadFileDataFromCluster+0xc4>
     67e:	33 94       	inc	r3
     680:	0a c0       	rjmp	.+20     	; 0x696 <fat_loadFileDataFromCluster+0xbe>
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <toupper>
     688:	28 2d       	mov	r18, r8
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	29 f4       	brne	.+10     	; 0x69c <fat_loadFileDataFromCluster+0xc4>
     692:	33 94       	inc	r3
     694:	93 94       	inc	r9
     696:	9a e0       	ldi	r25, 0x0A	; 10
     698:	99 15       	cp	r25, r9
     69a:	f8 f6       	brcc	.-66     	; 0x65a <fat_loadFileDataFromCluster+0x82>
     69c:	8b e0       	ldi	r24, 0x0B	; 11
     69e:	98 12       	cpse	r9, r24
     6a0:	18 c0       	rjmp	.+48     	; 0x6d2 <fat_loadFileDataFromCluster+0xfa>
     6a2:	cf e5       	ldi	r28, 0x5F	; 95
     6a4:	d6 e0       	ldi	r29, 0x06	; 6
     6a6:	c8 01       	movw	r24, r16
     6a8:	96 95       	lsr	r25
     6aa:	87 95       	ror	r24
     6ac:	92 95       	swap	r25
     6ae:	82 95       	swap	r24
     6b0:	8f 70       	andi	r24, 0x0F	; 15
     6b2:	89 27       	eor	r24, r25
     6b4:	9f 70       	andi	r25, 0x0F	; 15
     6b6:	89 27       	eor	r24, r25
     6b8:	88 8b       	std	Y+16, r24	; 0x10
     6ba:	c8 01       	movw	r24, r16
     6bc:	61 df       	rcall	.-318    	; 0x580 <fat_loadRowOfSector>
     6be:	8e 81       	ldd	r24, Y+6	; 0x06
     6c0:	9f 81       	ldd	r25, Y+7	; 0x07
     6c2:	a8 85       	ldd	r26, Y+8	; 0x08
     6c4:	b9 85       	ldd	r27, Y+9	; 0x09
     6c6:	8d 8b       	std	Y+21, r24	; 0x15
     6c8:	9e 8b       	std	Y+22, r25	; 0x16
     6ca:	af 8b       	std	Y+23, r26	; 0x17
     6cc:	b8 8f       	std	Y+24, r27	; 0x18
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <fat_loadFileDataFromCluster+0x118>
     6d2:	00 5e       	subi	r16, 0xE0	; 224
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
     6d6:	a0 96       	adiw	r28, 0x20	; 32
     6d8:	01 15       	cp	r16, r1
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	19 07       	cpc	r17, r25
     6de:	09 f0       	breq	.+2      	; 0x6e2 <fat_loadFileDataFromCluster+0x10a>
     6e0:	a9 cf       	rjmp	.-174    	; 0x634 <fat_loadFileDataFromCluster+0x5c>
     6e2:	23 94       	inc	r2
     6e4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <fat+0x15>
     6e8:	28 16       	cp	r2, r24
     6ea:	08 f4       	brcc	.+2      	; 0x6ee <fat_loadFileDataFromCluster+0x116>
     6ec:	8b cf       	rjmp	.-234    	; 0x604 <fat_loadFileDataFromCluster+0x2c>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	7f 90       	pop	r7
     70a:	6f 90       	pop	r6
     70c:	5f 90       	pop	r5
     70e:	4f 90       	pop	r4
     710:	3f 90       	pop	r3
     712:	2f 90       	pop	r2
     714:	08 95       	ret

00000716 <fat_makeSfnDataEntry>:
     716:	2f 92       	push	r2
     718:	3f 92       	push	r3
     71a:	5f 92       	push	r5
     71c:	6f 92       	push	r6
     71e:	7f 92       	push	r7
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	00 d0       	rcall	.+0      	; 0x73a <fat_makeSfnDataEntry+0x24>
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	56 2e       	mov	r5, r22
     746:	49 01       	movw	r8, r18
     748:	5a 01       	movw	r10, r20
     74a:	67 01       	movw	r12, r14
     74c:	78 01       	movw	r14, r16
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
     754:	00 91 6f 06 	lds	r16, 0x066F	; 0x80066f <file+0x10>
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	08 9f       	mul	r16, r24
     75c:	80 01       	movw	r16, r0
     75e:	11 24       	eor	r1, r1
     760:	f8 01       	movw	r30, r16
     762:	eb 5a       	subi	r30, 0xAB	; 171
     764:	fb 4f       	sbci	r31, 0xFB	; 251
     766:	fa 83       	std	Y+2, r31	; 0x02
     768:	e9 83       	std	Y+1, r30	; 0x01
     76a:	cf 01       	movw	r24, r30
     76c:	45 96       	adiw	r24, 0x15	; 21
     76e:	11 92       	st	Z+, r1
     770:	8e 17       	cp	r24, r30
     772:	9f 07       	cpc	r25, r31
     774:	e1 f7       	brne	.-8      	; 0x76e <fat_makeSfnDataEntry+0x58>
     776:	69 80       	ldd	r6, Y+1	; 0x01
     778:	7a 80       	ldd	r7, Y+2	; 0x02
     77a:	31 2c       	mov	r3, r1
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	68 94       	set
     780:	22 24       	eor	r2, r2
     782:	25 f8       	bld	r2, 5
     784:	f3 01       	movw	r30, r6
     786:	20 82       	st	Z, r2
     788:	18 30       	cpi	r17, 0x08	; 8
     78a:	70 f5       	brcc	.+92     	; 0x7e8 <fat_makeSfnDataEntry+0xd2>
     78c:	eb 81       	ldd	r30, Y+3	; 0x03
     78e:	fc 81       	ldd	r31, Y+4	; 0x04
     790:	e3 0d       	add	r30, r3
     792:	f1 1d       	adc	r31, r1
     794:	80 81       	ld	r24, Z
     796:	8e 32       	cpi	r24, 0x2E	; 46
     798:	51 f1       	breq	.+84     	; 0x7ee <fat_makeSfnDataEntry+0xd8>
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <toupper>
     7a0:	f3 01       	movw	r30, r6
     7a2:	80 83       	st	Z, r24
     7a4:	33 94       	inc	r3
     7a6:	23 c0       	rjmp	.+70     	; 0x7ee <fat_makeSfnDataEntry+0xd8>
     7a8:	33 94       	inc	r3
     7aa:	eb 81       	ldd	r30, Y+3	; 0x03
     7ac:	fc 81       	ldd	r31, Y+4	; 0x04
     7ae:	e3 0d       	add	r30, r3
     7b0:	f1 1d       	adc	r31, r1
     7b2:	80 81       	ld	r24, Z
     7b4:	88 23       	and	r24, r24
     7b6:	31 f0       	breq	.+12     	; 0x7c4 <fat_makeSfnDataEntry+0xae>
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <toupper>
     7be:	f3 01       	movw	r30, r6
     7c0:	80 83       	st	Z, r24
     7c2:	33 94       	inc	r3
     7c4:	ff ef       	ldi	r31, 0xFF	; 255
     7c6:	6f 1a       	sub	r6, r31
     7c8:	7f 0a       	sbc	r7, r31
     7ca:	1f 5f       	subi	r17, 0xFF	; 255
     7cc:	1b 30       	cpi	r17, 0x0B	; 11
     7ce:	d1 f6       	brne	.-76     	; 0x784 <fat_makeSfnDataEntry+0x6e>
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02
     7d4:	53 86       	std	Z+11, r5	; 0x0b
     7d6:	b5 8a       	std	Z+21, r11	; 0x15
     7d8:	a4 8a       	std	Z+20, r10	; 0x14
     7da:	93 8e       	std	Z+27, r9	; 0x1b
     7dc:	82 8e       	std	Z+26, r8	; 0x1a
     7de:	c4 8e       	std	Z+28, r12	; 0x1c
     7e0:	d5 8e       	std	Z+29, r13	; 0x1d
     7e2:	e6 8e       	std	Z+30, r14	; 0x1e
     7e4:	f7 8e       	std	Z+31, r15	; 0x1f
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <fat_makeSfnDataEntry+0xde>
     7e8:	18 30       	cpi	r17, 0x08	; 8
     7ea:	f9 f6       	brne	.-66     	; 0x7aa <fat_makeSfnDataEntry+0x94>
     7ec:	dd cf       	rjmp	.-70     	; 0x7a8 <fat_makeSfnDataEntry+0x92>
     7ee:	18 30       	cpi	r17, 0x08	; 8
     7f0:	49 f7       	brne	.-46     	; 0x7c4 <fat_makeSfnDataEntry+0xae>
     7f2:	da cf       	rjmp	.-76     	; 0x7a8 <fat_makeSfnDataEntry+0x92>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	9f 90       	pop	r9
     812:	8f 90       	pop	r8
     814:	7f 90       	pop	r7
     816:	6f 90       	pop	r6
     818:	5f 90       	pop	r5
     81a:	3f 90       	pop	r3
     81c:	2f 90       	pop	r2
     81e:	08 95       	ret

00000820 <fat_getNextCluster>:
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <fat+0x16>
     830:	20 31       	cpi	r18, 0x10	; 16
     832:	81 f5       	brne	.+96     	; 0x894 <fat_getNextCluster+0x74>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	cc 0c       	add	r12, r12
     83a:	dd 1c       	adc	r13, r13
     83c:	ee 1c       	adc	r14, r14
     83e:	ff 1c       	adc	r15, r15
     840:	b7 01       	movw	r22, r14
     842:	a6 01       	movw	r20, r12
     844:	03 2e       	mov	r0, r19
     846:	39 e0       	ldi	r19, 0x09	; 9
     848:	76 95       	lsr	r23
     84a:	67 95       	ror	r22
     84c:	57 95       	ror	r21
     84e:	47 95       	ror	r20
     850:	3a 95       	dec	r19
     852:	d1 f7       	brne	.-12     	; 0x848 <fat_getNextCluster+0x28>
     854:	30 2d       	mov	r19, r0
     856:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <fat+0x11>
     85a:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <fat+0x12>
     85e:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <fat+0x13>
     862:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <fat+0x14>
     866:	8a 01       	movw	r16, r20
     868:	9b 01       	movw	r18, r22
     86a:	08 0f       	add	r16, r24
     86c:	19 1f       	adc	r17, r25
     86e:	2a 1f       	adc	r18, r26
     870:	3b 1f       	adc	r19, r27
     872:	c9 01       	movw	r24, r18
     874:	b8 01       	movw	r22, r16
     876:	c2 dd       	rcall	.-1148   	; 0x3fc <fat_loadSector>
     878:	11 e0       	ldi	r17, 0x01	; 1
     87a:	d1 22       	and	r13, r17
     87c:	ee 24       	eor	r14, r14
     87e:	ff 24       	eor	r15, r15
     880:	c6 01       	movw	r24, r12
     882:	48 96       	adiw	r24, 0x18	; 24
     884:	fc 01       	movw	r30, r24
     886:	e3 5c       	subi	r30, 0xC3	; 195
     888:	fb 4f       	sbci	r31, 0xFB	; 251
     88a:	60 81       	ld	r22, Z
     88c:	71 81       	ldd	r23, Z+1	; 0x01
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	33 c0       	rjmp	.+102    	; 0x8fa <fat_getNextCluster+0xda>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
     898:	cc 0c       	add	r12, r12
     89a:	dd 1c       	adc	r13, r13
     89c:	ee 1c       	adc	r14, r14
     89e:	ff 1c       	adc	r15, r15
     8a0:	cc 0c       	add	r12, r12
     8a2:	dd 1c       	adc	r13, r13
     8a4:	ee 1c       	adc	r14, r14
     8a6:	ff 1c       	adc	r15, r15
     8a8:	b7 01       	movw	r22, r14
     8aa:	a6 01       	movw	r20, r12
     8ac:	03 2e       	mov	r0, r19
     8ae:	39 e0       	ldi	r19, 0x09	; 9
     8b0:	76 95       	lsr	r23
     8b2:	67 95       	ror	r22
     8b4:	57 95       	ror	r21
     8b6:	47 95       	ror	r20
     8b8:	3a 95       	dec	r19
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <fat_getNextCluster+0x90>
     8bc:	30 2d       	mov	r19, r0
     8be:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <fat+0x11>
     8c2:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <fat+0x12>
     8c6:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <fat+0x13>
     8ca:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <fat+0x14>
     8ce:	8a 01       	movw	r16, r20
     8d0:	9b 01       	movw	r18, r22
     8d2:	08 0f       	add	r16, r24
     8d4:	19 1f       	adc	r17, r25
     8d6:	2a 1f       	adc	r18, r26
     8d8:	3b 1f       	adc	r19, r27
     8da:	c9 01       	movw	r24, r18
     8dc:	b8 01       	movw	r22, r16
     8de:	8e dd       	rcall	.-1252   	; 0x3fc <fat_loadSector>
     8e0:	11 e0       	ldi	r17, 0x01	; 1
     8e2:	d1 22       	and	r13, r17
     8e4:	ee 24       	eor	r14, r14
     8e6:	ff 24       	eor	r15, r15
     8e8:	c6 01       	movw	r24, r12
     8ea:	48 96       	adiw	r24, 0x18	; 24
     8ec:	fc 01       	movw	r30, r24
     8ee:	e3 5c       	subi	r30, 0xC3	; 195
     8f0:	fb 4f       	sbci	r31, 0xFB	; 251
     8f2:	60 81       	ld	r22, Z
     8f4:	71 81       	ldd	r23, Z+1	; 0x01
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <fat_loadFileDataFromDir>:
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	8c 01       	movw	r16, r24
     91a:	c0 90 42 04 	lds	r12, 0x0442	; 0x800442 <fat+0x5>
     91e:	d0 90 43 04 	lds	r13, 0x0443	; 0x800443 <fat+0x6>
     922:	e0 90 44 04 	lds	r14, 0x0444	; 0x800444 <fat+0x7>
     926:	f0 90 45 04 	lds	r15, 0x0445	; 0x800445 <fat+0x8>
     92a:	c1 14       	cp	r12, r1
     92c:	d1 04       	cpc	r13, r1
     92e:	e1 04       	cpc	r14, r1
     930:	f1 04       	cpc	r15, r1
     932:	21 f5       	brne	.+72     	; 0x97c <fat_loadFileDataFromDir+0x74>
     934:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <fat+0x16>
     938:	80 31       	cpi	r24, 0x10	; 16
     93a:	c1 f4       	brne	.+48     	; 0x96c <fat_loadFileDataFromDir+0x64>
     93c:	f1 2c       	mov	r15, r1
     93e:	cd e3       	ldi	r28, 0x3D	; 61
     940:	d4 e0       	ldi	r29, 0x04	; 4
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	ab 85       	ldd	r26, Y+11	; 0x0b
     948:	bc 85       	ldd	r27, Y+12	; 0x0c
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	6f 0d       	add	r22, r15
     950:	71 1d       	adc	r23, r1
     952:	81 1d       	adc	r24, r1
     954:	91 1d       	adc	r25, r1
     956:	a8 01       	movw	r20, r16
     958:	3f de       	rcall	.-898    	; 0x5d8 <fat_loadFileDataFromCluster>
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	b1 f1       	breq	.+108    	; 0x9ca <fat_loadFileDataFromDir+0xc2>
     95e:	8d 89       	ldd	r24, Y+21	; 0x15
     960:	f8 0e       	add	r15, r24
     962:	8f e1       	ldi	r24, 0x1F	; 31
     964:	8f 15       	cp	r24, r15
     966:	68 f7       	brcc	.-38     	; 0x942 <fat_loadFileDataFromDir+0x3a>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	2f c0       	rjmp	.+94     	; 0x9ca <fat_loadFileDataFromDir+0xc2>
     96c:	c0 90 46 04 	lds	r12, 0x0446	; 0x800446 <fat+0x9>
     970:	d0 90 47 04 	lds	r13, 0x0447	; 0x800447 <fat+0xa>
     974:	e0 90 48 04 	lds	r14, 0x0448	; 0x800448 <fat+0xb>
     978:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <fat+0xc>
     97c:	cd e3       	ldi	r28, 0x3D	; 61
     97e:	d4 e0       	ldi	r29, 0x04	; 4
     980:	0c c0       	rjmp	.+24     	; 0x99a <fat_loadFileDataFromDir+0x92>
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	c8 dd       	rcall	.-1136   	; 0x518 <fat_clustToSec>
     988:	a8 01       	movw	r20, r16
     98a:	26 de       	rcall	.-948    	; 0x5d8 <fat_loadFileDataFromCluster>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	e9 f0       	breq	.+58     	; 0x9ca <fat_loadFileDataFromDir+0xc2>
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	45 df       	rcall	.-374    	; 0x820 <fat_getNextCluster>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
     99a:	88 ef       	ldi	r24, 0xF8	; 248
     99c:	c8 16       	cp	r12, r24
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	d8 06       	cpc	r13, r24
     9a2:	e8 06       	cpc	r14, r24
     9a4:	8f e0       	ldi	r24, 0x0F	; 15
     9a6:	f8 06       	cpc	r15, r24
     9a8:	18 f0       	brcs	.+6      	; 0x9b0 <fat_loadFileDataFromDir+0xa8>
     9aa:	8e 89       	ldd	r24, Y+22	; 0x16
     9ac:	80 32       	cpi	r24, 0x20	; 32
     9ae:	61 f0       	breq	.+24     	; 0x9c8 <fat_loadFileDataFromDir+0xc0>
     9b0:	88 ef       	ldi	r24, 0xF8	; 248
     9b2:	c8 16       	cp	r12, r24
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	d8 06       	cpc	r13, r24
     9b8:	e1 04       	cpc	r14, r1
     9ba:	f1 04       	cpc	r15, r1
     9bc:	10 f3       	brcs	.-60     	; 0x982 <fat_loadFileDataFromDir+0x7a>
     9be:	8e 89       	ldd	r24, Y+22	; 0x16
     9c0:	80 31       	cpi	r24, 0x10	; 16
     9c2:	f9 f6       	brne	.-66     	; 0x982 <fat_loadFileDataFromDir+0x7a>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <fat_loadFileDataFromDir+0xc2>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <fat_getFatChainClustersInRow>:
     9dc:	2f 92       	push	r2
     9de:	3f 92       	push	r3
     9e0:	4f 92       	push	r4
     9e2:	5f 92       	push	r5
     9e4:	6f 92       	push	r6
     9e6:	7f 92       	push	r7
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	1b 01       	movw	r2, r22
     a02:	2c 01       	movw	r4, r24
     a04:	89 dd       	rcall	.-1262   	; 0x518 <fat_clustToSec>
     a06:	e5 e5       	ldi	r30, 0x55	; 85
     a08:	f6 e0       	ldi	r31, 0x06	; 6
     a0a:	60 83       	st	Z, r22
     a0c:	71 83       	std	Z+1, r23	; 0x01
     a0e:	82 83       	std	Z+2, r24	; 0x02
     a10:	93 83       	std	Z+3, r25	; 0x03
     a12:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <fat+0x15>
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	95 83       	std	Z+5, r25	; 0x05
     a1a:	84 83       	std	Z+4, r24	; 0x04
     a1c:	72 01       	movw	r14, r4
     a1e:	61 01       	movw	r12, r2
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	8f 01       	movw	r16, r30
     a26:	0f 2e       	mov	r0, r31
     a28:	fd e3       	ldi	r31, 0x3D	; 61
     a2a:	6f 2e       	mov	r6, r31
     a2c:	f4 e0       	ldi	r31, 0x04	; 4
     a2e:	7f 2e       	mov	r7, r31
     a30:	f0 2d       	mov	r31, r0
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	f4 de       	rcall	.-536    	; 0x820 <fat_getNextCluster>
     a38:	46 01       	movw	r8, r12
     a3a:	57 01       	movw	r10, r14
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	82 1a       	sub	r8, r18
     a40:	92 0a       	sbc	r9, r18
     a42:	a2 0a       	sbc	r10, r18
     a44:	b2 0a       	sbc	r11, r18
     a46:	68 15       	cp	r22, r8
     a48:	79 05       	cpc	r23, r9
     a4a:	8a 05       	cpc	r24, r10
     a4c:	9b 05       	cpc	r25, r11
     a4e:	a1 f4       	brne	.+40     	; 0xa78 <fat_getFatChainClustersInRow+0x9c>
     a50:	f3 01       	movw	r30, r6
     a52:	25 89       	ldd	r18, Z+21	; 0x15
     a54:	f8 01       	movw	r30, r16
     a56:	44 81       	ldd	r20, Z+4	; 0x04
     a58:	55 81       	ldd	r21, Z+5	; 0x05
     a5a:	fa 01       	movw	r30, r20
     a5c:	e2 0f       	add	r30, r18
     a5e:	f1 1d       	adc	r31, r1
     a60:	9f 01       	movw	r18, r30
     a62:	f8 01       	movw	r30, r16
     a64:	35 83       	std	Z+5, r19	; 0x05
     a66:	24 83       	std	Z+4, r18	; 0x04
     a68:	21 96       	adiw	r28, 0x01	; 1
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
     a6e:	c1 15       	cp	r28, r1
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 07       	cpc	r29, r31
     a74:	f1 f6       	brne	.-68     	; 0xa32 <fat_getFatChainClustersInRow+0x56>
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <fat_getFatChainClustersInRow+0xae>
     a78:	c0 92 5b 06 	sts	0x065B, r12	; 0x80065b <chain+0x6>
     a7c:	d0 92 5c 06 	sts	0x065C, r13	; 0x80065c <chain+0x7>
     a80:	e0 92 5d 06 	sts	0x065D, r14	; 0x80065d <chain+0x8>
     a84:	f0 92 5e 06 	sts	0x065E, r15	; 0x80065e <chain+0x9>
     a88:	0e c0       	rjmp	.+28     	; 0xaa6 <fat_getFatChainClustersInRow+0xca>
     a8a:	52 01       	movw	r10, r4
     a8c:	41 01       	movw	r8, r2
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	92 1a       	sub	r9, r18
     a92:	a2 0a       	sbc	r10, r18
     a94:	b2 0a       	sbc	r11, r18
     a96:	80 92 5b 06 	sts	0x065B, r8	; 0x80065b <chain+0x6>
     a9a:	90 92 5c 06 	sts	0x065C, r9	; 0x80065c <chain+0x7>
     a9e:	a0 92 5d 06 	sts	0x065D, r10	; 0x80065d <chain+0x8>
     aa2:	b0 92 5e 06 	sts	0x065E, r11	; 0x80065e <chain+0x9>
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
     abe:	7f 90       	pop	r7
     ac0:	6f 90       	pop	r6
     ac2:	5f 90       	pop	r5
     ac4:	4f 90       	pop	r4
     ac6:	3f 90       	pop	r3
     ac8:	2f 90       	pop	r2
     aca:	08 95       	ret

00000acc <fat_getFreeClustersInRow>:
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	4b 01       	movw	r8, r22
     ae6:	5c 01       	movw	r10, r24
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <fat_getFreeClustersInRow+0x28>
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	88 1a       	sub	r8, r24
     aee:	98 0a       	sbc	r9, r24
     af0:	a8 0a       	sbc	r10, r24
     af2:	b8 0a       	sbc	r11, r24
     af4:	c5 01       	movw	r24, r10
     af6:	b4 01       	movw	r22, r8
     af8:	93 de       	rcall	.-730    	; 0x820 <fat_getNextCluster>
     afa:	67 2b       	or	r22, r23
     afc:	68 2b       	or	r22, r24
     afe:	69 2b       	or	r22, r25
     b00:	a1 f7       	brne	.-24     	; 0xaea <fat_getFreeClustersInRow+0x1e>
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	08 dd       	rcall	.-1520   	; 0x518 <fat_clustToSec>
     b08:	e5 e5       	ldi	r30, 0x55	; 85
     b0a:	f6 e0       	ldi	r31, 0x06	; 6
     b0c:	60 83       	st	Z, r22
     b0e:	71 83       	std	Z+1, r23	; 0x01
     b10:	82 83       	std	Z+2, r24	; 0x02
     b12:	93 83       	std	Z+3, r25	; 0x03
     b14:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <fat+0x15>
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	95 83       	std	Z+5, r25	; 0x05
     b1c:	84 83       	std	Z+4, r24	; 0x04
     b1e:	75 01       	movw	r14, r10
     b20:	64 01       	movw	r12, r8
     b22:	ef ef       	ldi	r30, 0xFF	; 255
     b24:	ce 1a       	sub	r12, r30
     b26:	de 0a       	sbc	r13, r30
     b28:	ee 0a       	sbc	r14, r30
     b2a:	fe 0a       	sbc	r15, r30
     b2c:	ff ef       	ldi	r31, 0xFF	; 255
     b2e:	9f 1a       	sub	r9, r31
     b30:	af 0a       	sbc	r10, r31
     b32:	bf 0a       	sbc	r11, r31
     b34:	c5 e5       	ldi	r28, 0x55	; 85
     b36:	d6 e0       	ldi	r29, 0x06	; 6
     b38:	0d e3       	ldi	r16, 0x3D	; 61
     b3a:	14 e0       	ldi	r17, 0x04	; 4
     b3c:	c7 01       	movw	r24, r14
     b3e:	b6 01       	movw	r22, r12
     b40:	6f de       	rcall	.-802    	; 0x820 <fat_getNextCluster>
     b42:	67 2b       	or	r22, r23
     b44:	68 2b       	or	r22, r24
     b46:	69 2b       	or	r22, r25
     b48:	91 f4       	brne	.+36     	; 0xb6e <fat_getFreeClustersInRow+0xa2>
     b4a:	f8 01       	movw	r30, r16
     b4c:	25 89       	ldd	r18, Z+21	; 0x15
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	9d 81       	ldd	r25, Y+5	; 0x05
     b52:	82 0f       	add	r24, r18
     b54:	91 1d       	adc	r25, r1
     b56:	9d 83       	std	Y+5, r25	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	ff ef       	ldi	r31, 0xFF	; 255
     b5c:	cf 1a       	sub	r12, r31
     b5e:	df 0a       	sbc	r13, r31
     b60:	ef 0a       	sbc	r14, r31
     b62:	ff 0a       	sbc	r15, r31
     b64:	c8 14       	cp	r12, r8
     b66:	d9 04       	cpc	r13, r9
     b68:	ea 04       	cpc	r14, r10
     b6a:	fb 04       	cpc	r15, r11
     b6c:	39 f7       	brne	.-50     	; 0xb3c <fat_getFreeClustersInRow+0x70>
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	08 95       	ret

00000b88 <fat_setCluster>:
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	49 01       	movw	r8, r18
     b9e:	5a 01       	movw	r10, r20
     ba0:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <fat+0x16>
     ba4:	20 31       	cpi	r18, 0x10	; 16
     ba6:	71 f5       	brne	.+92     	; 0xc04 <fat_setCluster+0x7c>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	cc 0c       	add	r12, r12
     bae:	dd 1c       	adc	r13, r13
     bb0:	ee 1c       	adc	r14, r14
     bb2:	ff 1c       	adc	r15, r15
     bb4:	b7 01       	movw	r22, r14
     bb6:	a6 01       	movw	r20, r12
     bb8:	03 2e       	mov	r0, r19
     bba:	39 e0       	ldi	r19, 0x09	; 9
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	3a 95       	dec	r19
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <fat_setCluster+0x34>
     bc8:	30 2d       	mov	r19, r0
     bca:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <fat+0x11>
     bce:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <fat+0x12>
     bd2:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <fat+0x13>
     bd6:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <fat+0x14>
     bda:	8a 01       	movw	r16, r20
     bdc:	9b 01       	movw	r18, r22
     bde:	08 0f       	add	r16, r24
     be0:	19 1f       	adc	r17, r25
     be2:	2a 1f       	adc	r18, r26
     be4:	3b 1f       	adc	r19, r27
     be6:	c9 01       	movw	r24, r18
     be8:	b8 01       	movw	r22, r16
     bea:	08 dc       	rcall	.-2032   	; 0x3fc <fat_loadSector>
     bec:	11 e0       	ldi	r17, 0x01	; 1
     bee:	d1 22       	and	r13, r17
     bf0:	ee 24       	eor	r14, r14
     bf2:	ff 24       	eor	r15, r15
     bf4:	c6 01       	movw	r24, r12
     bf6:	48 96       	adiw	r24, 0x18	; 24
     bf8:	fc 01       	movw	r30, r24
     bfa:	e3 5c       	subi	r30, 0xC3	; 195
     bfc:	fb 4f       	sbci	r31, 0xFB	; 251
     bfe:	91 82       	std	Z+1, r9	; 0x01
     c00:	80 82       	st	Z, r8
     c02:	33 c0       	rjmp	.+102    	; 0xc6a <fat_setCluster+0xe2>
     c04:	6b 01       	movw	r12, r22
     c06:	7c 01       	movw	r14, r24
     c08:	cc 0c       	add	r12, r12
     c0a:	dd 1c       	adc	r13, r13
     c0c:	ee 1c       	adc	r14, r14
     c0e:	ff 1c       	adc	r15, r15
     c10:	cc 0c       	add	r12, r12
     c12:	dd 1c       	adc	r13, r13
     c14:	ee 1c       	adc	r14, r14
     c16:	ff 1c       	adc	r15, r15
     c18:	b7 01       	movw	r22, r14
     c1a:	a6 01       	movw	r20, r12
     c1c:	03 2e       	mov	r0, r19
     c1e:	39 e0       	ldi	r19, 0x09	; 9
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	3a 95       	dec	r19
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <fat_setCluster+0x98>
     c2c:	30 2d       	mov	r19, r0
     c2e:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <fat+0x11>
     c32:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <fat+0x12>
     c36:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <fat+0x13>
     c3a:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <fat+0x14>
     c3e:	8a 01       	movw	r16, r20
     c40:	9b 01       	movw	r18, r22
     c42:	08 0f       	add	r16, r24
     c44:	19 1f       	adc	r17, r25
     c46:	2a 1f       	adc	r18, r26
     c48:	3b 1f       	adc	r19, r27
     c4a:	c9 01       	movw	r24, r18
     c4c:	b8 01       	movw	r22, r16
     c4e:	d6 db       	rcall	.-2132   	; 0x3fc <fat_loadSector>
     c50:	11 e0       	ldi	r17, 0x01	; 1
     c52:	d1 22       	and	r13, r17
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	c6 01       	movw	r24, r12
     c5a:	48 96       	adiw	r24, 0x18	; 24
     c5c:	fc 01       	movw	r30, r24
     c5e:	e3 5c       	subi	r30, 0xC3	; 195
     c60:	fb 4f       	sbci	r31, 0xFB	; 251
     c62:	80 82       	st	Z, r8
     c64:	91 82       	std	Z+1, r9	; 0x01
     c66:	a2 82       	std	Z+2, r10	; 0x02
     c68:	b3 82       	std	Z+3, r11	; 0x03
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	08 95       	ret

00000c86 <fat_makeFileEntry>:
     c86:	2f 92       	push	r2
     c88:	3f 92       	push	r3
     c8a:	4f 92       	push	r4
     c8c:	5f 92       	push	r5
     c8e:	7f 92       	push	r7
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	1f 92       	push	r1
     caa:	1f 92       	push	r1
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	76 2e       	mov	r7, r22
     cb6:	c0 90 42 04 	lds	r12, 0x0442	; 0x800442 <fat+0x5>
     cba:	d0 90 43 04 	lds	r13, 0x0443	; 0x800443 <fat+0x6>
     cbe:	e0 90 44 04 	lds	r14, 0x0444	; 0x800444 <fat+0x7>
     cc2:	f0 90 45 04 	lds	r15, 0x0445	; 0x800445 <fat+0x8>
     cc6:	c1 14       	cp	r12, r1
     cc8:	d1 04       	cpc	r13, r1
     cca:	e1 04       	cpc	r14, r1
     ccc:	f1 04       	cpc	r15, r1
     cce:	49 f4       	brne	.+18     	; 0xce2 <fat_makeFileEntry+0x5c>
     cd0:	ed e3       	ldi	r30, 0x3D	; 61
     cd2:	f4 e0       	ldi	r31, 0x04	; 4
     cd4:	c1 84       	ldd	r12, Z+9	; 0x09
     cd6:	d2 84       	ldd	r13, Z+10	; 0x0a
     cd8:	e3 84       	ldd	r14, Z+11	; 0x0b
     cda:	f4 84       	ldd	r15, Z+12	; 0x0c
     cdc:	86 89       	ldd	r24, Z+22	; 0x16
     cde:	80 31       	cpi	r24, 0x10	; 16
     ce0:	19 f0       	breq	.+6      	; 0xce8 <fat_makeFileEntry+0x62>
     ce2:	0d e3       	ldi	r16, 0x3D	; 61
     ce4:	14 e0       	ldi	r17, 0x04	; 4
     ce6:	17 c0       	rjmp	.+46     	; 0xd16 <fat_makeFileEntry+0x90>
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	61 0f       	add	r22, r17
     cf2:	71 1d       	adc	r23, r1
     cf4:	81 1d       	adc	r24, r1
     cf6:	91 1d       	adc	r25, r1
     cf8:	c6 db       	rcall	.-2164   	; 0x486 <fat_getFreeRowsOfCluster>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <fat_makeFileEntry+0x7a>
     cfe:	b5 c0       	rjmp	.+362    	; 0xe6a <fat_makeFileEntry+0x1e4>
     d00:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <fat+0x15>
     d04:	18 0f       	add	r17, r24
     d06:	10 32       	cpi	r17, 0x20	; 32
     d08:	80 f3       	brcs	.-32     	; 0xcea <fat_makeFileEntry+0x64>
     d0a:	af c0       	rjmp	.+350    	; 0xe6a <fat_makeFileEntry+0x1e4>
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <fat_makeFileEntry+0x90>
     d12:	6b 01       	movw	r12, r22
     d14:	7c 01       	movw	r14, r24
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	fe db       	rcall	.-2052   	; 0x518 <fat_clustToSec>
     d1c:	41 e0       	ldi	r20, 0x01	; 1
     d1e:	b3 db       	rcall	.-2202   	; 0x486 <fat_getFreeRowsOfCluster>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	09 f4       	brne	.+2      	; 0xd26 <fat_makeFileEntry+0xa0>
     d24:	a2 c0       	rjmp	.+324    	; 0xe6a <fat_makeFileEntry+0x1e4>
     d26:	80 90 65 06 	lds	r8, 0x0665	; 0x800665 <file+0x6>
     d2a:	90 90 66 06 	lds	r9, 0x0666	; 0x800666 <file+0x7>
     d2e:	a0 90 67 06 	lds	r10, 0x0667	; 0x800667 <file+0x8>
     d32:	b0 90 68 06 	lds	r11, 0x0668	; 0x800668 <file+0x9>
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	72 dd       	rcall	.-1308   	; 0x820 <fat_getNextCluster>
     d3c:	68 3f       	cpi	r22, 0xF8	; 248
     d3e:	2f ef       	ldi	r18, 0xFF	; 255
     d40:	72 07       	cpc	r23, r18
     d42:	82 07       	cpc	r24, r18
     d44:	2f e0       	ldi	r18, 0x0F	; 15
     d46:	92 07       	cpc	r25, r18
     d48:	20 f0       	brcs	.+8      	; 0xd52 <fat_makeFileEntry+0xcc>
     d4a:	f8 01       	movw	r30, r16
     d4c:	26 89       	ldd	r18, Z+22	; 0x16
     d4e:	20 32       	cpi	r18, 0x20	; 32
     d50:	51 f0       	breq	.+20     	; 0xd66 <fat_makeFileEntry+0xe0>
     d52:	68 3f       	cpi	r22, 0xF8	; 248
     d54:	ff ef       	ldi	r31, 0xFF	; 255
     d56:	7f 07       	cpc	r23, r31
     d58:	81 05       	cpc	r24, r1
     d5a:	91 05       	cpc	r25, r1
     d5c:	b8 f2       	brcs	.-82     	; 0xd0c <fat_makeFileEntry+0x86>
     d5e:	f8 01       	movw	r30, r16
     d60:	26 89       	ldd	r18, Z+22	; 0x16
     d62:	20 31       	cpi	r18, 0x10	; 16
     d64:	b1 f6       	brne	.-84     	; 0xd12 <fat_makeFileEntry+0x8c>
     d66:	60 91 55 06 	lds	r22, 0x0655	; 0x800655 <chain>
     d6a:	70 91 56 06 	lds	r23, 0x0656	; 0x800656 <chain+0x1>
     d6e:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <chain+0x2>
     d72:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <chain+0x3>
     d76:	e9 db       	rcall	.-2094   	; 0x54a <fat_secToClust>
     d78:	1b 01       	movw	r2, r22
     d7a:	2c 01       	movw	r4, r24
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	c7 01       	movw	r24, r14
     d82:	b6 01       	movw	r22, r12
     d84:	01 df       	rcall	.-510    	; 0xb88 <fat_setCluster>
     d86:	2f ef       	ldi	r18, 0xFF	; 255
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	4f ef       	ldi	r20, 0xFF	; 255
     d8c:	5f e0       	ldi	r21, 0x0F	; 15
     d8e:	c2 01       	movw	r24, r4
     d90:	b1 01       	movw	r22, r2
     d92:	fa de       	rcall	.-524    	; 0xb88 <fat_setCluster>
     d94:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <file+0x6>
     d98:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <file+0x7>
     d9c:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <file+0x8>
     da0:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <file+0x9>
     da4:	45 e5       	ldi	r20, 0x55	; 85
     da6:	54 e0       	ldi	r21, 0x04	; 4
     da8:	0b d5       	rcall	.+2582   	; 0x17c0 <mmc_write_sector>
     daa:	e5 e5       	ldi	r30, 0x55	; 85
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	85 e5       	ldi	r24, 0x55	; 85
     db0:	94 e0       	ldi	r25, 0x04	; 4
     db2:	12 92       	st	-Z, r1
     db4:	e8 17       	cp	r30, r24
     db6:	f9 07       	cpc	r31, r25
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <fat_makeFileEntry+0x12c>
     dba:	51 2c       	mov	r5, r1
     dbc:	0d e3       	ldi	r16, 0x3D	; 61
     dbe:	14 e0       	ldi	r17, 0x04	; 4
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <fat_makeFileEntry+0x13e>
     dc2:	59 2e       	mov	r5, r25
     dc4:	e5 e5       	ldi	r30, 0x55	; 85
     dc6:	f6 e0       	ldi	r31, 0x06	; 6
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	a2 81       	ldd	r26, Z+2	; 0x02
     dce:	b3 81       	ldd	r27, Z+3	; 0x03
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	65 0d       	add	r22, r5
     dd6:	71 1d       	adc	r23, r1
     dd8:	81 1d       	adc	r24, r1
     dda:	91 1d       	adc	r25, r1
     ddc:	08 db       	rcall	.-2544   	; 0x3ee <fat_writeSector>
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	95 0d       	add	r25, r5
     de2:	f8 01       	movw	r30, r16
     de4:	85 89       	ldd	r24, Z+21	; 0x15
     de6:	58 16       	cp	r5, r24
     de8:	60 f3       	brcs	.-40     	; 0xdc2 <fat_makeFileEntry+0x13c>
     dea:	e5 e5       	ldi	r30, 0x55	; 85
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	20 80       	ld	r2, Z
     df0:	31 80       	ldd	r3, Z+1	; 0x01
     df2:	42 80       	ldd	r4, Z+2	; 0x02
     df4:	53 80       	ldd	r5, Z+3	; 0x03
     df6:	20 92 65 06 	sts	0x0665, r2	; 0x800665 <file+0x6>
     dfa:	30 92 66 06 	sts	0x0666, r3	; 0x800666 <file+0x7>
     dfe:	40 92 67 06 	sts	0x0667, r4	; 0x800667 <file+0x8>
     e02:	50 92 68 06 	sts	0x0668, r5	; 0x800668 <file+0x9>
     e06:	c5 01       	movw	r24, r10
     e08:	b4 01       	movw	r22, r8
     e0a:	9f db       	rcall	.-2242   	; 0x54a <fat_secToClust>
     e0c:	60 93 5b 06 	sts	0x065B, r22	; 0x80065b <chain+0x6>
     e10:	70 93 5c 06 	sts	0x065C, r23	; 0x80065c <chain+0x7>
     e14:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <chain+0x8>
     e18:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <chain+0x9>
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	c2 01       	movw	r24, r4
     e20:	b1 01       	movw	r22, r2
     e22:	31 db       	rcall	.-2462   	; 0x486 <fat_getFreeRowsOfCluster>
     e24:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <chain+0x4>
     e28:	90 91 5a 06 	lds	r25, 0x065A	; 0x80065a <chain+0x5>
     e2c:	40 91 52 04 	lds	r20, 0x0452	; 0x800452 <fat+0x15>
     e30:	24 2f       	mov	r18, r20
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	28 17       	cp	r18, r24
     e36:	39 07       	cpc	r19, r25
     e38:	a8 f4       	brcc	.+42     	; 0xe64 <fat_makeFileEntry+0x1de>
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f6 e0       	ldi	r31, 0x06	; 6
     e3e:	c0 80       	ld	r12, Z
     e40:	d1 80       	ldd	r13, Z+1	; 0x01
     e42:	e2 80       	ldd	r14, Z+2	; 0x02
     e44:	f3 80       	ldd	r15, Z+3	; 0x03
     e46:	46 01       	movw	r8, r12
     e48:	57 01       	movw	r10, r14
     e4a:	84 0e       	add	r8, r20
     e4c:	91 1c       	adc	r9, r1
     e4e:	a1 1c       	adc	r10, r1
     e50:	b1 1c       	adc	r11, r1
     e52:	80 82       	st	Z, r8
     e54:	91 82       	std	Z+1, r9	; 0x01
     e56:	a2 82       	std	Z+2, r10	; 0x02
     e58:	b3 82       	std	Z+3, r11	; 0x03
     e5a:	82 1b       	sub	r24, r18
     e5c:	93 0b       	sbc	r25, r19
     e5e:	95 83       	std	Z+5, r25	; 0x05
     e60:	84 83       	std	Z+4, r24	; 0x04
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <fat_makeFileEntry+0x1e4>
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	31 de       	rcall	.-926    	; 0xacc <fat_getFreeClustersInRow>
     e6a:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <file+0x6>
     e6e:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <file+0x7>
     e72:	a0 91 67 06 	lds	r26, 0x0667	; 0x800667 <file+0x8>
     e76:	b0 91 68 06 	lds	r27, 0x0668	; 0x800668 <file+0x9>
     e7a:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <file+0x15>
     e7e:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <file+0x16>
     e82:	a0 93 76 06 	sts	0x0676, r26	; 0x800676 <file+0x17>
     e86:	b0 93 77 06 	sts	0x0677, r27	; 0x800677 <file+0x18>
     e8a:	0f 2e       	mov	r0, r31
     e8c:	f5 e5       	ldi	r31, 0x55	; 85
     e8e:	cf 2e       	mov	r12, r31
     e90:	f6 e0       	ldi	r31, 0x06	; 6
     e92:	df 2e       	mov	r13, r31
     e94:	f0 2d       	mov	r31, r0
     e96:	f6 01       	movw	r30, r12
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	54 db       	rcall	.-2392   	; 0x54a <fat_secToClust>
     ea2:	9b 01       	movw	r18, r22
     ea4:	ac 01       	movw	r20, r24
     ea6:	60 93 70 06 	sts	0x0670, r22	; 0x800670 <file+0x11>
     eaa:	70 93 71 06 	sts	0x0671, r23	; 0x800671 <file+0x12>
     eae:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <file+0x13>
     eb2:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <file+0x14>
     eb6:	f6 01       	movw	r30, r12
     eb8:	66 83       	std	Z+6, r22	; 0x06
     eba:	77 83       	std	Z+7, r23	; 0x07
     ebc:	80 87       	std	Z+8, r24	; 0x08
     ebe:	91 87       	std	Z+9, r25	; 0x09
     ec0:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <file+0xa>
     ec4:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <file+0xb>
     ec8:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <file+0xc>
     ecc:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <file+0xd>
     ed0:	e1 2c       	mov	r14, r1
     ed2:	f1 2c       	mov	r15, r1
     ed4:	87 01       	movw	r16, r14
     ed6:	67 2d       	mov	r22, r7
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	1c dc       	rcall	.-1992   	; 0x716 <fat_makeSfnDataEntry>
     ede:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <file+0x6>
     ee2:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <file+0x7>
     ee6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <file+0x8>
     eea:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <file+0x9>
     eee:	45 e5       	ldi	r20, 0x55	; 85
     ef0:	54 e0       	ldi	r21, 0x04	; 4
     ef2:	66 d4       	rcall	.+2252   	; 0x17c0 <mmc_write_sector>
     ef4:	f6 01       	movw	r30, r12
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	a2 81       	ldd	r26, Z+2	; 0x02
     efc:	b3 81       	ldd	r27, Z+3	; 0x03
     efe:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <file+0x6>
     f02:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <file+0x7>
     f06:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <file+0x8>
     f0a:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <file+0x9>
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	8f 90       	pop	r8
     f2a:	7f 90       	pop	r7
     f2c:	5f 90       	pop	r5
     f2e:	4f 90       	pop	r4
     f30:	3f 90       	pop	r3
     f32:	2f 90       	pop	r2
     f34:	08 95       	ret

00000f36 <fat_setClusterChain>:
     f36:	4f 92       	push	r4
     f38:	5f 92       	push	r5
     f3a:	6f 92       	push	r6
     f3c:	7f 92       	push	r7
     f3e:	8f 92       	push	r8
     f40:	9f 92       	push	r9
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	6b 01       	movw	r12, r22
     f50:	7c 01       	movw	r14, r24
     f52:	29 01       	movw	r4, r18
     f54:	3a 01       	movw	r6, r20
     f56:	60 91 5b 06 	lds	r22, 0x065B	; 0x80065b <chain+0x6>
     f5a:	70 91 5c 06 	lds	r23, 0x065C	; 0x80065c <chain+0x7>
     f5e:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <chain+0x8>
     f62:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <chain+0x9>
     f66:	a7 01       	movw	r20, r14
     f68:	96 01       	movw	r18, r12
     f6a:	0e de       	rcall	.-996    	; 0xb88 <fat_setCluster>
     f6c:	c4 14       	cp	r12, r4
     f6e:	d5 04       	cpc	r13, r5
     f70:	e6 04       	cpc	r14, r6
     f72:	f7 04       	cpc	r15, r7
     f74:	99 f0       	breq	.+38     	; 0xf9c <fat_setClusterChain+0x66>
     f76:	46 01       	movw	r8, r12
     f78:	57 01       	movw	r10, r14
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	88 1a       	sub	r8, r24
     f7e:	98 0a       	sbc	r9, r24
     f80:	a8 0a       	sbc	r10, r24
     f82:	b8 0a       	sbc	r11, r24
     f84:	a5 01       	movw	r20, r10
     f86:	94 01       	movw	r18, r8
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 01       	movw	r22, r12
     f8c:	fd dd       	rcall	.-1030   	; 0xb88 <fat_setCluster>
     f8e:	75 01       	movw	r14, r10
     f90:	64 01       	movw	r12, r8
     f92:	48 14       	cp	r4, r8
     f94:	59 04       	cpc	r5, r9
     f96:	6a 04       	cpc	r6, r10
     f98:	7b 04       	cpc	r7, r11
     f9a:	69 f7       	brne	.-38     	; 0xf76 <fat_setClusterChain+0x40>
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f ef       	ldi	r20, 0xFF	; 255
     fa2:	5f e0       	ldi	r21, 0x0F	; 15
     fa4:	c3 01       	movw	r24, r6
     fa6:	b2 01       	movw	r22, r4
     fa8:	ef dd       	rcall	.-1058   	; 0xb88 <fat_setCluster>
     faa:	40 92 5b 06 	sts	0x065B, r4	; 0x80065b <chain+0x6>
     fae:	50 92 5c 06 	sts	0x065C, r5	; 0x80065c <chain+0x7>
     fb2:	60 92 5d 06 	sts	0x065D, r6	; 0x80065d <chain+0x8>
     fb6:	70 92 5e 06 	sts	0x065E, r7	; 0x80065e <chain+0x9>
     fba:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <fat+0x4>
     fbe:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <file+0x6>
     fc2:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <file+0x7>
     fc6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <file+0x8>
     fca:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <file+0x9>
     fce:	45 e5       	ldi	r20, 0x55	; 85
     fd0:	54 e0       	ldi	r21, 0x04	; 4
     fd2:	f6 d3       	rcall	.+2028   	; 0x17c0 <mmc_write_sector>
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	7f 90       	pop	r7
     fe6:	6f 90       	pop	r6
     fe8:	5f 90       	pop	r5
     fea:	4f 90       	pop	r4
     fec:	08 95       	ret

00000fee <fat_loadFatData>:
//***************************************************************************************************************
// Initialisiert die Fat(16/32) daten, wie: root directory sektor, daten sektor, fat sektor...
// siehe auch Fatgen103.pdf. ist NICHT auf performance optimiert!
// byte/sector, byte/cluster, anzahl der fats, sector/fat ... (halt alle wichtigen daten zum lesen ders datei systems!)
//*****************************************************************<**********************************************
uint8_t fat_loadFatData(void){
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	cf 93       	push	r28
	uint32_t 	secOfFirstPartition;				// ist 1. sektor der 1. partition aus dem MBR
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
    1000:	45 e5       	ldi	r20, 0x55	; 85
    1002:	54 e0       	ldi	r21, 0x04	; 4
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	cb 01       	movw	r24, r22
    100a:	1a d4       	rcall	.+2100   	; 0x1840 <mmc_read_sector>
    100c:	c8 2f       	mov	r28, r24
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f0       	breq	.+2      	; 0x1014 <fat_loadFatData+0x26>
    1012:	94 c0       	rjmp	.+296    	; 0x113c <fat_loadFatData+0x14e>
		secOfFirstPartition = 0;
		if( fat.sector[457] == 0 ){		
    1014:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <fat+0x1e1>
    1018:	81 11       	cpse	r24, r1
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <fat_loadFatData+0x4a>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector =& fat.sector[454];
				secOfFirstPartition = *(uint32_t*)vsector;
    101c:	80 90 1b 06 	lds	r8, 0x061B	; 0x80061b <fat+0x1de>
    1020:	90 90 1c 06 	lds	r9, 0x061C	; 0x80061c <fat+0x1df>
    1024:	a0 90 1d 06 	lds	r10, 0x061D	; 0x80061d <fat+0x1e0>
    1028:	b0 90 1e 06 	lds	r11, 0x061E	; 0x80061e <fat+0x1e1>
				secOfFirstPartition |= fat.sector[455];
				secOfFirstPartition <<= 8;
	
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
    102c:	45 e5       	ldi	r20, 0x55	; 85
    102e:	54 e0       	ldi	r21, 0x04	; 4
    1030:	c5 01       	movw	r24, r10
    1032:	b4 01       	movw	r22, r8
    1034:	05 d4       	rcall	.+2058   	; 0x1840 <mmc_read_sector>
    1036:	03 c0       	rjmp	.+6      	; 0x103e <fat_loadFatData+0x50>
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
		secOfFirstPartition = 0;
    1038:	81 2c       	mov	r8, r1
    103a:	91 2c       	mov	r9, r1
    103c:	54 01       	movw	r10, r8
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
		}
					
		fat.secPerClust=fat.sector[13];		// fat.secPerClust, 13 only (power of 2)
    103e:	ed e3       	ldi	r30, 0x3D	; 61
    1040:	f4 e0       	ldi	r31, 0x04	; 4
    1042:	85 a1       	ldd	r24, Z+37	; 0x25
    1044:	85 8b       	std	Z+21, r24	; 0x15

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			vsector =& fat.sector[14];
			fat.fatSec=*(uint16_t*)vsector;
    1046:	c6 a0       	ldd	r12, Z+38	; 0x26
    1048:	d7 a0       	ldd	r13, Z+39	; 0x27
    104a:	e1 2c       	mov	r14, r1
    104c:	f1 2c       	mov	r15, r1
    104e:	c1 8a       	std	Z+17, r12	; 0x11
    1050:	d2 8a       	std	Z+18, r13	; 0x12
    1052:	e3 8a       	std	Z+19, r14	; 0x13
    1054:	f4 8a       	std	Z+20, r15	; 0x14

			vsector=&fat.sector[17];
			rootEntCnt=*(uint16_t*)vsector;

			vsector=&fat.sector[22];
			fatSz16=*(uint16_t*)vsector;
    1056:	86 a5       	ldd	r24, Z+46	; 0x2e
    1058:	97 a5       	ldd	r25, Z+47	; 0x2f
			fatSz16 = fat.sector[23];
			fatSz16 <<= 8;
			fatSz16 |= fat.sector[22];
		#endif

		fat.rootDir	 = ( (rootEntCnt <<5) + 511 ) /512;	// ist 0 bei fat 32, sonst der root dir sektor
    105a:	41 a5       	ldd	r20, Z+41	; 0x29
    105c:	52 a5       	ldd	r21, Z+42	; 0x2a
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	42 95       	swap	r20
    1064:	52 95       	swap	r21
    1066:	50 7f       	andi	r21, 0xF0	; 240
    1068:	54 27       	eor	r21, r20
    106a:	40 7f       	andi	r20, 0xF0	; 240
    106c:	54 27       	eor	r21, r20
    106e:	41 50       	subi	r20, 0x01	; 1
    1070:	5e 4f       	sbci	r21, 0xFE	; 254
    1072:	45 2f       	mov	r20, r21
    1074:	55 27       	eor	r21, r21
    1076:	46 95       	lsr	r20
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0

		if(fat.rootDir==0){									// FAT32 spezifisch (die pruefung so, ist nicht spezifikation konform !).
    107c:	41 15       	cp	r20, r1
    107e:	51 05       	cpc	r21, r1
    1080:	61 05       	cpc	r22, r1
    1082:	71 05       	cpc	r23, r1
    1084:	f1 f4       	brne	.+60     	; 0x10c2 <fat_loadFatData+0xd4>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector=&fat.sector[36];
				fatSz32=*(uint32_t *)vsector;
    1086:	24 ad       	ldd	r18, Z+60	; 0x3c
    1088:	35 ad       	ldd	r19, Z+61	; 0x3d
    108a:	46 ad       	ldd	r20, Z+62	; 0x3e
    108c:	57 ad       	ldd	r21, Z+63	; 0x3f

				vsector=&fat.sector[44];
				fat.rootDir=*(uint32_t *)vsector;
    108e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <fat+0x44>
    1092:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <fat+0x45>
    1096:	a0 91 83 04 	lds	r26, 0x0483	; 0x800483 <fat+0x46>
    109a:	b0 91 84 04 	lds	r27, 0x0484	; 0x800484 <fat+0x47>
    109e:	81 87       	std	Z+9, r24	; 0x09
    10a0:	92 87       	std	Z+10, r25	; 0x0a
    10a2:	a3 87       	std	Z+11, r26	; 0x0b
    10a4:	b4 87       	std	Z+12, r27	; 0x0c
				fat.rootDir |= fat.sector[45];
				fat.rootDir <<= 8;
				fat.rootDir |= fat.sector[44];
			#endif

			fat.dataDirSec = fat.fatSec + (fatSz32 * fat.sector[16]);	// data sector (beginnt mit cluster 2)
    10a6:	a0 a5       	ldd	r26, Z+40	; 0x28
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	b7 d4       	rcall	.+2414   	; 0x1a1a <__muluhisi3>
    10ac:	c6 0e       	add	r12, r22
    10ae:	d7 1e       	adc	r13, r23
    10b0:	e8 1e       	adc	r14, r24
    10b2:	f9 1e       	adc	r15, r25
    10b4:	c5 86       	std	Z+13, r12	; 0x0d
    10b6:	d6 86       	std	Z+14, r13	; 0x0e
    10b8:	e7 86       	std	Z+15, r14	; 0x0f
    10ba:	f0 8a       	std	Z+16, r15	; 0x10
			fat.fatType=32;									// fat typ
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	86 8b       	std	Z+22, r24	; 0x16
    10c0:	1e c0       	rjmp	.+60     	; 0x10fe <fat_loadFatData+0x110>
			}

		else{												// FAT16	spezifisch
			fat.dataDirSec = fat.fatSec + (fatSz16 * fat.sector[16]) + fat.rootDir;		// data sektor (beginnt mit cluster 2)
    10c2:	ed e3       	ldi	r30, 0x3D	; 61
    10c4:	f4 e0       	ldi	r31, 0x04	; 4
    10c6:	a0 a5       	ldd	r26, Z+40	; 0x28
    10c8:	a8 9f       	mul	r26, r24
    10ca:	90 01       	movw	r18, r0
    10cc:	a9 9f       	mul	r26, r25
    10ce:	30 0d       	add	r19, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	c2 0e       	add	r12, r18
    10d4:	d3 1e       	adc	r13, r19
    10d6:	e1 1c       	adc	r14, r1
    10d8:	f1 1c       	adc	r15, r1
    10da:	4c 0d       	add	r20, r12
    10dc:	5d 1d       	adc	r21, r13
    10de:	6e 1d       	adc	r22, r14
    10e0:	7f 1d       	adc	r23, r15
    10e2:	45 87       	std	Z+13, r20	; 0x0d
    10e4:	56 87       	std	Z+14, r21	; 0x0e
    10e6:	67 87       	std	Z+15, r22	; 0x0f
    10e8:	70 8b       	std	Z+16, r23	; 0x10
			fat.rootDir=fat.dataDirSec-fat.rootDir;			// root dir sektor, da nicht im datenbereich (cluster)
			fat.rootDir+=secOfFirstPartition;				// addiert den startsektor auf 	"
    10ea:	c8 0c       	add	r12, r8
    10ec:	d9 1c       	adc	r13, r9
    10ee:	ea 1c       	adc	r14, r10
    10f0:	fb 1c       	adc	r15, r11
    10f2:	c1 86       	std	Z+9, r12	; 0x09
    10f4:	d2 86       	std	Z+10, r13	; 0x0a
    10f6:	e3 86       	std	Z+11, r14	; 0x0b
    10f8:	f4 86       	std	Z+12, r15	; 0x0c
			fat.fatType=16;									// fat typ
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	86 8b       	std	Z+22, r24	; 0x16
			}

		fat.fatSec+=secOfFirstPartition;					// addiert den startsektor auf
    10fe:	ed e3       	ldi	r30, 0x3D	; 61
    1100:	f4 e0       	ldi	r31, 0x04	; 4
    1102:	81 89       	ldd	r24, Z+17	; 0x11
    1104:	92 89       	ldd	r25, Z+18	; 0x12
    1106:	a3 89       	ldd	r26, Z+19	; 0x13
    1108:	b4 89       	ldd	r27, Z+20	; 0x14
    110a:	88 0d       	add	r24, r8
    110c:	99 1d       	adc	r25, r9
    110e:	aa 1d       	adc	r26, r10
    1110:	bb 1d       	adc	r27, r11
    1112:	81 8b       	std	Z+17, r24	; 0x11
    1114:	92 8b       	std	Z+18, r25	; 0x12
    1116:	a3 8b       	std	Z+19, r26	; 0x13
    1118:	b4 8b       	std	Z+20, r27	; 0x14
		fat.dataDirSec+=secOfFirstPartition;				// addiert den startsektor auf (umrechnung von absolut auf real)
    111a:	85 85       	ldd	r24, Z+13	; 0x0d
    111c:	96 85       	ldd	r25, Z+14	; 0x0e
    111e:	a7 85       	ldd	r26, Z+15	; 0x0f
    1120:	b0 89       	ldd	r27, Z+16	; 0x10
    1122:	88 0e       	add	r8, r24
    1124:	99 1e       	adc	r9, r25
    1126:	aa 1e       	adc	r10, r26
    1128:	bb 1e       	adc	r11, r27
    112a:	85 86       	std	Z+13, r8	; 0x0d
    112c:	96 86       	std	Z+14, r9	; 0x0e
    112e:	a7 86       	std	Z+15, r10	; 0x0f
    1130:	b0 8a       	std	Z+16, r11	; 0x10
		fat.dir=0;											// dir auf '0'==root dir, sonst 1.Cluster des dir
    1132:	15 82       	std	Z+5, r1	; 0x05
    1134:	16 82       	std	Z+6, r1	; 0x06
    1136:	17 82       	std	Z+7, r1	; 0x07
    1138:	10 86       	std	Z+8, r1	; 0x08
		return TRUE;
    113a:	01 c0       	rjmp	.+2      	; 0x113e <fat_loadFatData+0x150>
		}

return FALSE;			// sector nicht gelesen, fat nicht initialisiert!!
    113c:	c0 e0       	ldi	r28, 0x00	; 0
}
    113e:	8c 2f       	mov	r24, r28
    1140:	cf 91       	pop	r28
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	08 95       	ret

00001154 <ffopen>:
		#else
			fat_loadSector(file.currentSectorNr+1);				//2.) die bekannten in einer reihe reichen noch.(nur alle 512 bytes)
		#endif
	}
	return fat.sector[file.cntOfBytes++];
}
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
    115e:	16 2f       	mov	r17, r22
    1160:	d3 db       	rcall	.-2138   	; 0x908 <fat_loadFileDataFromDir>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	c1 f4       	brne	.+48     	; 0x1196 <ffopen+0x42>
    1166:	12 37       	cpi	r17, 0x72	; 114
    1168:	51 f5       	brne	.+84     	; 0x11be <ffopen+0x6a>
    116a:	0f e5       	ldi	r16, 0x5F	; 95
    116c:	16 e0       	ldi	r17, 0x06	; 6
    116e:	f8 01       	movw	r30, r16
    1170:	61 89       	ldd	r22, Z+17	; 0x11
    1172:	72 89       	ldd	r23, Z+18	; 0x12
    1174:	83 89       	ldd	r24, Z+19	; 0x13
    1176:	94 89       	ldd	r25, Z+20	; 0x14
    1178:	31 dc       	rcall	.-1950   	; 0x9dc <fat_getFatChainClustersInRow>
    117a:	f8 01       	movw	r30, r16
    117c:	d7 87       	std	Z+15, r29	; 0x0f
    117e:	c6 87       	std	Z+14, r28	; 0x0e
    1180:	60 91 55 06 	lds	r22, 0x0655	; 0x800655 <chain>
    1184:	70 91 56 06 	lds	r23, 0x0656	; 0x800656 <chain+0x1>
    1188:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <chain+0x2>
    118c:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <chain+0x3>
    1190:	35 d9       	rcall	.-3478   	; 0x3fc <fat_loadSector>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <ffopen+0x74>
    1196:	81 11       	cpse	r24, r1
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <ffopen+0x6e>
    119a:	13 36       	cpi	r17, 0x63	; 99
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <ffopen+0x72>
    119e:	d0 93 6e 06 	sts	0x066E, r29	; 0x80066e <file+0xf>
    11a2:	c0 93 6d 06 	sts	0x066D, r28	; 0x80066d <file+0xe>
    11a6:	62 e0       	ldi	r22, 0x02	; 2
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	8e dc       	rcall	.-1764   	; 0xacc <fat_getFreeClustersInRow>
    11b0:	60 e2       	ldi	r22, 0x20	; 32
    11b2:	ce 01       	movw	r24, r28
    11b4:	68 dd       	rcall	.-1328   	; 0xc86 <fat_makeFileEntry>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <ffopen+0x74>
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <ffopen+0x74>
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <ffopen+0x74>
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <fflushFileData>:
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	af e5       	ldi	r26, 0x5F	; 95
    11f4:	b6 e0       	ldi	r27, 0x06	; 6
    11f6:	ed 91       	ld	r30, X+
    11f8:	fc 91       	ld	r31, X
    11fa:	11 97       	sbiw	r26, 0x01	; 1
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	cd 90       	ld	r12, X+
    1200:	dd 90       	ld	r13, X+
    1202:	ed 90       	ld	r14, X+
    1204:	fc 90       	ld	r15, X
    1206:	15 97       	sbiw	r26, 0x05	; 5
    1208:	ce 0e       	add	r12, r30
    120a:	df 1e       	adc	r13, r31
    120c:	e1 1c       	adc	r14, r1
    120e:	f1 1c       	adc	r15, r1
    1210:	1a 96       	adiw	r26, 0x0a	; 10
    1212:	8d 91       	ld	r24, X+
    1214:	9d 91       	ld	r25, X+
    1216:	0d 90       	ld	r0, X+
    1218:	bc 91       	ld	r27, X
    121a:	a0 2d       	mov	r26, r0
    121c:	8c 15       	cp	r24, r12
    121e:	9d 05       	cpc	r25, r13
    1220:	ae 05       	cpc	r26, r14
    1222:	bf 05       	cpc	r27, r15
    1224:	08 f0       	brcs	.+2      	; 0x1228 <fflushFileData+0x56>
    1226:	5a c0       	rjmp	.+180    	; 0x12dc <fflushFileData+0x10a>
    1228:	80 90 65 06 	lds	r8, 0x0665	; 0x800665 <file+0x6>
    122c:	90 90 66 06 	lds	r9, 0x0666	; 0x800666 <file+0x7>
    1230:	a0 90 67 06 	lds	r10, 0x0667	; 0x800667 <file+0x8>
    1234:	b0 90 68 06 	lds	r11, 0x0668	; 0x800668 <file+0x9>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	09 f0       	breq	.+2      	; 0x123e <fflushFileData+0x6c>
    123c:	59 c0       	rjmp	.+178    	; 0x12f0 <fflushFileData+0x11e>
    123e:	62 c0       	rjmp	.+196    	; 0x1304 <fflushFileData+0x132>
    1240:	11 92       	st	Z+, r1
    1242:	e8 17       	cp	r30, r24
    1244:	f9 07       	cpc	r31, r25
    1246:	e1 f7       	brne	.-8      	; 0x1240 <fflushFileData+0x6e>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
    124e:	10 c0       	rjmp	.+32     	; 0x1270 <fflushFileData+0x9e>
    1250:	7c d9       	rcall	.-3336   	; 0x54a <fat_secToClust>
    1252:	2b 01       	movw	r4, r22
    1254:	3c 01       	movw	r6, r24
    1256:	60 91 55 06 	lds	r22, 0x0655	; 0x800655 <chain>
    125a:	70 91 56 06 	lds	r23, 0x0656	; 0x800656 <chain+0x1>
    125e:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <chain+0x2>
    1262:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <chain+0x3>
    1266:	71 d9       	rcall	.-3358   	; 0x54a <fat_secToClust>
    1268:	a3 01       	movw	r20, r6
    126a:	92 01       	movw	r18, r4
    126c:	64 de       	rcall	.-824    	; 0xf36 <fat_setClusterChain>
    126e:	11 c0       	rjmp	.+34     	; 0x1292 <fflushFileData+0xc0>
    1270:	c5 01       	movw	r24, r10
    1272:	b4 01       	movw	r22, r8
    1274:	6a d9       	rcall	.-3372   	; 0x54a <fat_secToClust>
    1276:	2b 01       	movw	r4, r22
    1278:	3c 01       	movw	r6, r24
    127a:	60 91 55 06 	lds	r22, 0x0655	; 0x800655 <chain>
    127e:	70 91 56 06 	lds	r23, 0x0656	; 0x800656 <chain+0x1>
    1282:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <chain+0x2>
    1286:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <chain+0x3>
    128a:	5f d9       	rcall	.-3394   	; 0x54a <fat_secToClust>
    128c:	a3 01       	movw	r20, r6
    128e:	92 01       	movw	r18, r4
    1290:	52 de       	rcall	.-860    	; 0xf36 <fat_setClusterChain>
    1292:	cf e5       	ldi	r28, 0x5F	; 95
    1294:	d6 e0       	ldi	r29, 0x06	; 6
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	ae d8       	rcall	.-3748   	; 0x3fc <fat_loadSector>
    12a0:	e8 89       	ldd	r30, Y+16	; 0x10
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	e8 9f       	mul	r30, r24
    12a6:	f0 01       	movw	r30, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	ef 58       	subi	r30, 0x8F	; 143
    12ac:	fb 4f       	sbci	r31, 0xFB	; 251
    12ae:	c0 82       	st	Z, r12
    12b0:	d1 82       	std	Z+1, r13	; 0x01
    12b2:	e2 82       	std	Z+2, r14	; 0x02
    12b4:	f3 82       	std	Z+3, r15	; 0x03
    12b6:	ca 86       	std	Y+10, r12	; 0x0a
    12b8:	db 86       	std	Y+11, r13	; 0x0b
    12ba:	ec 86       	std	Y+12, r14	; 0x0c
    12bc:	fd 86       	std	Y+13, r15	; 0x0d
    12be:	80 92 55 06 	sts	0x0655, r8	; 0x800655 <chain>
    12c2:	90 92 56 06 	sts	0x0656, r9	; 0x800656 <chain+0x1>
    12c6:	a0 92 57 06 	sts	0x0657, r10	; 0x800657 <chain+0x2>
    12ca:	b0 92 58 06 	sts	0x0658, r11	; 0x800658 <chain+0x3>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	91 d8       	rcall	.-3806   	; 0x3fc <fat_loadSector>
    12da:	29 c0       	rjmp	.+82     	; 0x132e <fflushFileData+0x15c>
    12dc:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <file+0x6>
    12e0:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <file+0x7>
    12e4:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <file+0x8>
    12e8:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <file+0x9>
    12ec:	80 d8       	rcall	.-3840   	; 0x3ee <fat_writeSector>
    12ee:	1f c0       	rjmp	.+62     	; 0x132e <fflushFileData+0x15c>
    12f0:	e1 15       	cp	r30, r1
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	f8 07       	cpc	r31, r24
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <fflushFileData+0x128>
    12f8:	bb cf       	rjmp	.-138    	; 0x1270 <fflushFileData+0x9e>
    12fa:	eb 5a       	subi	r30, 0xAB	; 171
    12fc:	fb 4f       	sbci	r31, 0xFB	; 251
    12fe:	85 e5       	ldi	r24, 0x55	; 85
    1300:	96 e0       	ldi	r25, 0x06	; 6
    1302:	9e cf       	rjmp	.-196    	; 0x1240 <fflushFileData+0x6e>
    1304:	c5 01       	movw	r24, r10
    1306:	b4 01       	movw	r22, r8
    1308:	61 50       	subi	r22, 0x01	; 1
    130a:	71 09       	sbc	r23, r1
    130c:	81 09       	sbc	r24, r1
    130e:	91 09       	sbc	r25, r1
    1310:	00 91 55 06 	lds	r16, 0x0655	; 0x800655 <chain>
    1314:	10 91 56 06 	lds	r17, 0x0656	; 0x800656 <chain+0x1>
    1318:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <chain+0x2>
    131c:	30 91 58 06 	lds	r19, 0x0658	; 0x800658 <chain+0x3>
    1320:	60 17       	cp	r22, r16
    1322:	71 07       	cpc	r23, r17
    1324:	82 07       	cpc	r24, r18
    1326:	93 07       	cpc	r25, r19
    1328:	08 f4       	brcc	.+2      	; 0x132c <fflushFileData+0x15a>
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <fflushFileData+0xc0>
    132c:	91 cf       	rjmp	.-222    	; 0x1250 <fflushFileData+0x7e>
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	5f 90       	pop	r5
    134c:	4f 90       	pop	r4
    134e:	08 95       	ret

00001350 <ffclose>:
    1350:	40 df       	rcall	.-384    	; 0x11d2 <fflushFileData>
    1352:	ef e5       	ldi	r30, 0x5F	; 95
    1354:	f6 e0       	ldi	r31, 0x06	; 6
    1356:	11 82       	std	Z+1, r1	; 0x01
    1358:	10 82       	st	Z, r1
    135a:	12 82       	std	Z+2, r1	; 0x02
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	14 82       	std	Z+4, r1	; 0x04
    1360:	15 82       	std	Z+5, r1	; 0x05
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret

00001366 <ffseek>:
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	4b 01       	movw	r8, r22
    1380:	5c 01       	movw	r10, r24
    1382:	27 df       	rcall	.-434    	; 0x11d2 <fflushFileData>
    1384:	cf e5       	ldi	r28, 0x5F	; 95
    1386:	d6 e0       	ldi	r29, 0x06	; 6
    1388:	69 89       	ldd	r22, Y+17	; 0x11
    138a:	7a 89       	ldd	r23, Y+18	; 0x12
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	9c 89       	ldd	r25, Y+20	; 0x14
    1390:	25 db       	rcall	.-2486   	; 0x9dc <fat_getFatChainClustersInRow>
    1392:	40 91 55 06 	lds	r20, 0x0655	; 0x800655 <chain>
    1396:	50 91 56 06 	lds	r21, 0x0656	; 0x800656 <chain+0x1>
    139a:	60 91 57 06 	lds	r22, 0x0657	; 0x800657 <chain+0x2>
    139e:	70 91 58 06 	lds	r23, 0x0658	; 0x800658 <chain+0x3>
    13a2:	1a 82       	std	Y+2, r1	; 0x02
    13a4:	1b 82       	std	Y+3, r1	; 0x03
    13a6:	1c 82       	std	Y+4, r1	; 0x04
    13a8:	1d 82       	std	Y+5, r1	; 0x05
    13aa:	81 14       	cp	r8, r1
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	98 06       	cpc	r9, r24
    13b0:	a1 04       	cpc	r10, r1
    13b2:	b1 04       	cpc	r11, r1
    13b4:	a8 f1       	brcs	.+106    	; 0x1420 <ffseek+0xba>
    13b6:	75 01       	movw	r14, r10
    13b8:	64 01       	movw	r12, r8
    13ba:	8e 01       	movw	r16, r28
    13bc:	c5 e5       	ldi	r28, 0x55	; 85
    13be:	d6 e0       	ldi	r29, 0x06	; 6
    13c0:	e2 e0       	ldi	r30, 0x02	; 2
    13c2:	de 1a       	sub	r13, r30
    13c4:	e1 08       	sbc	r14, r1
    13c6:	f1 08       	sbc	r15, r1
    13c8:	f8 01       	movw	r30, r16
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	a4 81       	ldd	r26, Z+4	; 0x04
    13d0:	b5 81       	ldd	r27, Z+5	; 0x05
    13d2:	9e 5f       	subi	r25, 0xFE	; 254
    13d4:	af 4f       	sbci	r26, 0xFF	; 255
    13d6:	bf 4f       	sbci	r27, 0xFF	; 255
    13d8:	82 83       	std	Z+2, r24	; 0x02
    13da:	93 83       	std	Z+3, r25	; 0x03
    13dc:	a4 83       	std	Z+4, r26	; 0x04
    13de:	b5 83       	std	Z+5, r27	; 0x05
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	9d 83       	std	Y+5, r25	; 0x05
    13e8:	8c 83       	std	Y+4, r24	; 0x04
    13ea:	89 2b       	or	r24, r25
    13ec:	29 f0       	breq	.+10     	; 0x13f8 <ffseek+0x92>
    13ee:	4f 5f       	subi	r20, 0xFF	; 255
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	6f 4f       	sbci	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <ffseek+0xa6>
    13f8:	6e 81       	ldd	r22, Y+6	; 0x06
    13fa:	7f 81       	ldd	r23, Y+7	; 0x07
    13fc:	88 85       	ldd	r24, Y+8	; 0x08
    13fe:	99 85       	ldd	r25, Y+9	; 0x09
    1400:	0f da       	rcall	.-3042   	; 0x820 <fat_getNextCluster>
    1402:	ec da       	rcall	.-2600   	; 0x9dc <fat_getFatChainClustersInRow>
    1404:	48 81       	ld	r20, Y
    1406:	59 81       	ldd	r21, Y+1	; 0x01
    1408:	6a 81       	ldd	r22, Y+2	; 0x02
    140a:	7b 81       	ldd	r23, Y+3	; 0x03
    140c:	c1 14       	cp	r12, r1
    140e:	f2 e0       	ldi	r31, 0x02	; 2
    1410:	df 06       	cpc	r13, r31
    1412:	e1 04       	cpc	r14, r1
    1414:	f1 04       	cpc	r15, r1
    1416:	a0 f6       	brcc	.-88     	; 0x13c0 <ffseek+0x5a>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	98 22       	and	r9, r24
    141c:	aa 24       	eor	r10, r10
    141e:	bb 24       	eor	r11, r11
    1420:	cb 01       	movw	r24, r22
    1422:	ba 01       	movw	r22, r20
    1424:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fat_loadSector>
    1428:	90 92 60 06 	sts	0x0660, r9	; 0x800660 <file+0x1>
    142c:	80 92 5f 06 	sts	0x065F, r8	; 0x80065f <file>
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	bf 90       	pop	r11
    1442:	af 90       	pop	r10
    1444:	9f 90       	pop	r9
    1446:	8f 90       	pop	r8
    1448:	08 95       	ret

0000144a <ffwrite>:
// sektoren bekannt sein(datenmenge zu gross), werden die alten verkettet und neue gesucht. es ist noetig sich den letzten bekannten einer
// kette zu merken -> file.lastCluster, um auch nicht zusammenhaengende cluster verketten zu koennen (fat_setClusterChain macht das)!
// es ist beim ueberschreiben noetig, die schon beschriebenen sektoren der datei zu laden, damit man die richtigen daten
// hat. das ist bloed, weil so ein daten overhead von 50% entsteht. da lesen aber schneller als schreiben geht, verliert man nicht 50% an geschwindigkeit.
//*******************************************************************************************************************************
void ffwrite( uint8_t c){
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29

	fat.sector[ file.cntOfBytes++ ]=c;							// schreiben des chars auf den puffer sector und zaehler erhoehen (pre-increment)
    145a:	ef e5       	ldi	r30, 0x5F	; 95
    145c:	f6 e0       	ldi	r31, 0x06	; 6
    145e:	20 81       	ld	r18, Z
    1460:	31 81       	ldd	r19, Z+1	; 0x01
    1462:	a9 01       	movw	r20, r18
    1464:	4f 5f       	subi	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	51 83       	std	Z+1, r21	; 0x01
    146a:	40 83       	st	Z, r20
    146c:	f9 01       	movw	r30, r18
    146e:	e3 5c       	subi	r30, 0xC3	; 195
    1470:	fb 4f       	sbci	r31, 0xFB	; 251
    1472:	80 8f       	std	Z+24, r24	; 0x18

	if( file.cntOfBytes==512 ){									/** SEKTOR VOLL ( 3 moeglichkeiten ab hier !) **/
    1474:	41 15       	cp	r20, r1
    1476:	52 40       	sbci	r21, 0x02	; 2
    1478:	09 f0       	breq	.+2      	; 0x147c <ffwrite+0x32>
    147a:	90 c0       	rjmp	.+288    	; 0x159c <ffwrite+0x152>

		file.cntOfBytes = 0;	  									// ruecksetzen des sektor byte zaehlers.
    147c:	cf e5       	ldi	r28, 0x5F	; 95
    147e:	d6 e0       	ldi	r29, 0x06	; 6
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	18 82       	st	Y, r1
		file.seek += 512;											// position in der datei erhoehen, weil grade 512 bytes geschrieben.
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	ac 81       	ldd	r26, Y+4	; 0x04
    148a:	bd 81       	ldd	r27, Y+5	; 0x05
    148c:	9e 5f       	subi	r25, 0xFE	; 254
    148e:	af 4f       	sbci	r26, 0xFF	; 255
    1490:	bf 4f       	sbci	r27, 0xFF	; 255
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	ac 83       	std	Y+4, r26	; 0x04
    1498:	bd 83       	std	Y+5, r27	; 0x05
		mmc_write_sector( file.currentSectorNr,fat.sector );	/** 1.) vollen sektor auf karte schreiben, es sind noch freie sektoren bekannt**/
    149a:	6e 81       	ldd	r22, Y+6	; 0x06
    149c:	7f 81       	ldd	r23, Y+7	; 0x07
    149e:	88 85       	ldd	r24, Y+8	; 0x08
    14a0:	99 85       	ldd	r25, Y+9	; 0x09
    14a2:	45 e5       	ldi	r20, 0x55	; 85
    14a4:	54 e0       	ldi	r21, 0x04	; 4
    14a6:	8c d1       	rcall	.+792    	; 0x17c0 <mmc_write_sector>
		file.currentSectorNr +=1;									// naechsten sektor zum beschreiben.
    14a8:	4e 81       	ldd	r20, Y+6	; 0x06
    14aa:	5f 81       	ldd	r21, Y+7	; 0x07
    14ac:	68 85       	ldd	r22, Y+8	; 0x08
    14ae:	79 85       	ldd	r23, Y+9	; 0x09
    14b0:	db 01       	movw	r26, r22
    14b2:	ca 01       	movw	r24, r20
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	a1 1d       	adc	r26, r1
    14b8:	b1 1d       	adc	r27, r1
    14ba:	8e 83       	std	Y+6, r24	; 0x06
    14bc:	9f 83       	std	Y+7, r25	; 0x07
    14be:	a8 87       	std	Y+8, r26	; 0x08
    14c0:	b9 87       	std	Y+9, r27	; 0x09
		chain.cntSecs -=1;											// einen freien sektor zum beschreiben weniger.
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f6 e0       	ldi	r31, 0x06	; 6
    14c6:	84 81       	ldd	r24, Z+4	; 0x04
    14c8:	95 81       	ldd	r25, Z+5	; 0x05
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	95 83       	std	Z+5, r25	; 0x05
    14ce:	84 83       	std	Z+4, r24	; 0x04

		if( chain.cntSecs==0 ){										// ende der bekannten in einer reihe erreicht (freie oder verkettete)
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <ffwrite+0x8c>
    14d4:	49 c0       	rjmp	.+146    	; 0x1568 <ffwrite+0x11e>
			if( file.seek > file.length ){						/** 2.) ausserhalb der datei, jetzt ist es noetig die beschriebenen cluster zu verketten und neue freie zu suchen	**/
    14d6:	0a 81       	ldd	r16, Y+2	; 0x02
    14d8:	1b 81       	ldd	r17, Y+3	; 0x03
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    14e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    14e6:	80 17       	cp	r24, r16
    14e8:	91 07       	cpc	r25, r17
    14ea:	a2 07       	cpc	r26, r18
    14ec:	b3 07       	cpc	r27, r19
    14ee:	40 f5       	brcc	.+80     	; 0x1540 <ffwrite+0xf6>
				fat.bufferDirty = FALSE;							// damit nicht durch z.b. fat_getNextCluster nochmal dieser sektor gescchrieben wird, siehe fat_loadSector
    14f0:	0d e3       	ldi	r16, 0x3D	; 61
    14f2:	14 e0       	ldi	r17, 0x04	; 4
    14f4:	f8 01       	movw	r30, r16
    14f6:	14 82       	std	Z+4, r1	; 0x04
				fat_setClusterChain( fat_secToClust(chain.startSectors) , fat_secToClust(file.currentSectorNr-1) );	// verketten der beschriebenen.
    14f8:	cb 01       	movw	r24, r22
    14fa:	ba 01       	movw	r22, r20
    14fc:	26 d8       	rcall	.-4020   	; 0x54a <fat_secToClust>
    14fe:	6b 01       	movw	r12, r22
    1500:	7c 01       	movw	r14, r24
    1502:	c5 e5       	ldi	r28, 0x55	; 85
    1504:	d6 e0       	ldi	r29, 0x06	; 6
    1506:	68 81       	ld	r22, Y
    1508:	79 81       	ldd	r23, Y+1	; 0x01
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	1d d8       	rcall	.-4038   	; 0x54a <fat_secToClust>
    1510:	a7 01       	movw	r20, r14
    1512:	96 01       	movw	r18, r12
    1514:	10 dd       	rcall	.-1504   	; 0xf36 <fat_setClusterChain>
				fat_getFreeClustersInRow( chain.lastCluster );		// neue leere sektoren benoetigt, also suchen.
    1516:	6e 81       	ldd	r22, Y+6	; 0x06
    1518:	7f 81       	ldd	r23, Y+7	; 0x07
    151a:	88 85       	ldd	r24, Y+8	; 0x08
    151c:	99 85       	ldd	r25, Y+9	; 0x09
    151e:	d6 da       	rcall	.-2644   	; 0xacc <fat_getFreeClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    1520:	88 81       	ld	r24, Y
    1522:	99 81       	ldd	r25, Y+1	; 0x01
    1524:	aa 81       	ldd	r26, Y+2	; 0x02
    1526:	bb 81       	ldd	r27, Y+3	; 0x03
    1528:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <file+0x6>
    152c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <file+0x7>
    1530:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <file+0x8>
    1534:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <file+0x9>
				fat.bufferDirty = TRUE;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	f8 01       	movw	r30, r16
    153c:	84 83       	std	Z+4, r24	; 0x04
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <ffwrite+0x11e>
			}
			else {												/** 3.) noch innerhalb der datei, aber es muessen neue verkettete cluster gesucht werden, zum ueberschreiben **/
				fat_getFatChainClustersInRow( fat_getNextCluster(chain.lastCluster) );		// noch innerhalb der datei, deshlab verkettete suchen.
    1540:	c5 e5       	ldi	r28, 0x55	; 85
    1542:	d6 e0       	ldi	r29, 0x06	; 6
    1544:	6e 81       	ldd	r22, Y+6	; 0x06
    1546:	7f 81       	ldd	r23, Y+7	; 0x07
    1548:	88 85       	ldd	r24, Y+8	; 0x08
    154a:	99 85       	ldd	r25, Y+9	; 0x09
    154c:	69 d9       	rcall	.-3374   	; 0x820 <fat_getNextCluster>
    154e:	46 da       	rcall	.-2932   	; 0x9dc <fat_getFatChainClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    1550:	88 81       	ld	r24, Y
    1552:	99 81       	ldd	r25, Y+1	; 0x01
    1554:	aa 81       	ldd	r26, Y+2	; 0x02
    1556:	bb 81       	ldd	r27, Y+3	; 0x03
    1558:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <file+0x6>
    155c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <file+0x7>
    1560:	a0 93 67 06 	sts	0x0667, r26	; 0x800667 <file+0x8>
    1564:	b0 93 68 06 	sts	0x0668, r27	; 0x800668 <file+0x9>
			}
		}

		if( file.seek <= file.length ){
    1568:	ef e5       	ldi	r30, 0x5F	; 95
    156a:	f6 e0       	ldi	r31, 0x06	; 6
    156c:	42 81       	ldd	r20, Z+2	; 0x02
    156e:	53 81       	ldd	r21, Z+3	; 0x03
    1570:	64 81       	ldd	r22, Z+4	; 0x04
    1572:	75 81       	ldd	r23, Z+5	; 0x05
    1574:	82 85       	ldd	r24, Z+10	; 0x0a
    1576:	93 85       	ldd	r25, Z+11	; 0x0b
    1578:	a4 85       	ldd	r26, Z+12	; 0x0c
    157a:	b5 85       	ldd	r27, Z+13	; 0x0d
    157c:	84 17       	cp	r24, r20
    157e:	95 07       	cpc	r25, r21
    1580:	a6 07       	cpc	r26, r22
    1582:	b7 07       	cpc	r27, r23
    1584:	58 f0       	brcs	.+22     	; 0x159c <ffwrite+0x152>
			mmc_read_sector(file.currentSectorNr,fat.sector);		// wegen ueberschreiben, muss der zu beschreibende sektor geladen werden (zustand 3)...
    1586:	60 91 65 06 	lds	r22, 0x0665	; 0x800665 <file+0x6>
    158a:	70 91 66 06 	lds	r23, 0x0666	; 0x800666 <file+0x7>
    158e:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <file+0x8>
    1592:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <file+0x9>
    1596:	45 e5       	ldi	r20, 0x55	; 85
    1598:	54 e0       	ldi	r21, 0x04	; 4
    159a:	52 d1       	rcall	.+676    	; 0x1840 <mmc_read_sector>
		}
	}
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	08 95       	ret

000015ae <ffwrites>:
// *******************************************************************************************************************************
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    while (*s){
    15b4:	88 81       	ld	r24, Y
    15b6:	88 23       	and	r24, r24
    15b8:	29 f0       	breq	.+10     	; 0x15c4 <ffwrites+0x16>
    15ba:	21 96       	adiw	r28, 0x01	; 1
    	ffwrite(*s++);
    15bc:	46 df       	rcall	.-372    	; 0x144a <ffwrite>
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    while (*s){
    15be:	89 91       	ld	r24, Y+
    15c0:	81 11       	cpse	r24, r1
    15c2:	fc cf       	rjmp	.-8      	; 0x15bc <ffwrites+0xe>
    	ffwrite(*s++);
    }
    fat.bufferDirty = TRUE;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <fat+0x4>
  }
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <spi_write_byte>:
		uint8_t a;
	#endif

	// mmc/sd in hardware spi
	#if (MMC_SOFT_SPI==FALSE)
		SPDR = byte;    						//Sendet ein Byte
    15d0:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR,SPIF);
    15d2:	0d b4       	in	r0, 0x2d	; 45
    15d4:	07 fe       	sbrs	r0, 7
    15d6:	fd cf       	rjmp	.-6      	; 0x15d2 <spi_write_byte+0x2>
			MMC_Write |= (1<<SPI_Clock); 		//setzt Clock Impuls wieder auf (High)
			MMC_Write &= ~(1<<SPI_Clock);		//erzeugt ein Clock Impuls (LOW)
		}
		MMC_Write |= (1<<SPI_MOSI);				//setzt Output wieder auf High
	#endif
}
    15d8:	08 95       	ret

000015da <spi_read_byte>:
// *****************************************************************************
static uint8_t spi_read_byte(void){
	
	// mmc/sd in hardware spi
	#if (MMC_SOFT_SPI==FALSE)
	  SPDR = 0xff;
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	8e bd       	out	0x2e, r24	; 46
	  loop_until_bit_is_set(SPSR,SPIF);
    15de:	0d b4       	in	r0, 0x2d	; 45
    15e0:	07 fe       	sbrs	r0, 7
    15e2:	fd cf       	rjmp	.-6      	; 0x15de <spi_read_byte+0x4>
	  return (SPDR);
    15e4:	8e b5       	in	r24, 0x2e	; 46
			}
			MMC_Write &=~(1<<SPI_Clock); 				//erzeugt ein Clock Impuls (Low)
		}
		return (Byte);
	#endif
}
    15e6:	08 95       	ret

000015e8 <mmc_disable>:
}

// **********************************************************************************************************************************
static void mmc_disable(){

   MMC_CS_HIGH;   
    15e8:	28 9a       	sbi	0x05, 0	; 5
   spi_read_byte();
    15ea:	f7 cf       	rjmp	.-18     	; 0x15da <spi_read_byte>
    15ec:	08 95       	ret

000015ee <mmc_send_cmd>:

	return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (	uint8_t cmd,	uint32_t arg){
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	c8 2f       	mov	r28, r24
    15fa:	d4 2f       	mov	r29, r20
    15fc:	15 2f       	mov	r17, r21
    15fe:	06 2f       	mov	r16, r22
    1600:	f7 2e       	mov	r15, r23
	
	uint8_t n, res;
	// Select the card and wait for ready 
	mmc_disable();
    1602:	f2 df       	rcall	.-28     	; 0x15e8 <mmc_disable>
static uint8_t mmc_wait_ready (void){

	uint8_t TimingDelay = 50;

	do{
		if(	 spi_read_byte() == 0xFF ) return TRUE;
    1604:	28 98       	cbi	0x05, 0	; 5
    1606:	e9 df       	rcall	.-46     	; 0x15da <spi_read_byte>
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	e9 f7       	brne	.-6      	; 0x1606 <mmc_send_cmd+0x18>
	mmc_disable();
	if ( FALSE == mmc_enable() ){
		return 0xFF;
	}
	// Send command packet 
	spi_write_byte(0x40 | cmd);						// Start + Command index 
    160c:	8c 2f       	mov	r24, r28
    160e:	80 64       	ori	r24, 0x40	; 64
	spi_write_byte( (uint8_t)(arg >> 24) );	// Argument[31..24]
    1610:	df df       	rcall	.-66     	; 0x15d0 <spi_write_byte>
    1612:	8f 2d       	mov	r24, r15
	spi_write_byte( (uint8_t)(arg >> 16) );	// Argument[23..16]
    1614:	dd df       	rcall	.-70     	; 0x15d0 <spi_write_byte>
    1616:	80 2f       	mov	r24, r16
	spi_write_byte( (uint8_t)(arg >> 8) );	// Argument[15..8]
    1618:	db df       	rcall	.-74     	; 0x15d0 <spi_write_byte>
    161a:	81 2f       	mov	r24, r17
    161c:	d9 df       	rcall	.-78     	; 0x15d0 <spi_write_byte>
	spi_write_byte( (uint8_t)arg );			// Argument[7..0]
    161e:	8d 2f       	mov	r24, r29
    1620:	d7 df       	rcall	.-82     	; 0x15d0 <spi_write_byte>
	n = 0x01;										// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;						// Valid CRC for CMD0(0) 
    1622:	cc 23       	and	r28, r28
	if (cmd == CMD8) n = 0x87;						// Valid CRC for CMD8(0x1AA) 
    1624:	89 f0       	breq	.+34     	; 0x1648 <mmc_send_cmd+0x5a>
	spi_write_byte(n);
    1626:	c8 30       	cpi	r28, 0x08	; 8
    1628:	61 f0       	breq	.+24     	; 0x1642 <mmc_send_cmd+0x54>
    162a:	81 e0       	ldi	r24, 0x01	; 1

	// Receive command response 
	if (cmd == CMD12) spi_read_byte();				// Skip a stuff byte when stop reading 
    162c:	d1 df       	rcall	.-94     	; 0x15d0 <spi_write_byte>
    162e:	cc 30       	cpi	r28, 0x0C	; 12
    1630:	09 f4       	brne	.+2      	; 0x1634 <mmc_send_cmd+0x46>

	return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (	uint8_t cmd,	uint32_t arg){
    1632:	d3 df       	rcall	.-90     	; 0x15da <spi_read_byte>

	// Receive command response 
	if (cmd == CMD12) spi_read_byte();				// Skip a stuff byte when stop reading 
	n = 10;											// Wait for a valid response in timeout of 10 attempts 
	do
		res = spi_read_byte();
    1634:	ca e0       	ldi	r28, 0x0A	; 10
	while ( (res & 0x80) && --n );
    1636:	d1 df       	rcall	.-94     	; 0x15da <spi_read_byte>
    1638:	88 23       	and	r24, r24
    163a:	4c f4       	brge	.+18     	; 0x164e <mmc_send_cmd+0x60>
    163c:	c1 50       	subi	r28, 0x01	; 1
    163e:	d9 f7       	brne	.-10     	; 0x1636 <mmc_send_cmd+0x48>
	spi_write_byte( (uint8_t)(arg >> 8) );	// Argument[15..8]
	spi_write_byte( (uint8_t)arg );			// Argument[7..0]
	n = 0x01;										// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;						// Valid CRC for CMD0(0) 
	if (cmd == CMD8) n = 0x87;						// Valid CRC for CMD8(0x1AA) 
	spi_write_byte(n);
    1640:	06 c0       	rjmp	.+12     	; 0x164e <mmc_send_cmd+0x60>
    1642:	87 e8       	ldi	r24, 0x87	; 135
    1644:	c5 df       	rcall	.-118    	; 0x15d0 <spi_write_byte>
    1646:	f6 cf       	rjmp	.-20     	; 0x1634 <mmc_send_cmd+0x46>
    1648:	85 e9       	ldi	r24, 0x95	; 149
    164a:	c2 df       	rcall	.-124    	; 0x15d0 <spi_write_byte>
    164c:	f3 cf       	rjmp	.-26     	; 0x1634 <mmc_send_cmd+0x46>
    164e:	df 91       	pop	r29
	do
		res = spi_read_byte();
	while ( (res & 0x80) && --n );

	return res;										// Return with the response value 
}
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	08 95       	ret

0000165a <mmc_init>:
    165a:	af 92       	push	r10




// **********************************************************************************************************************************
uint8_t mmc_init (void){
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <mmc_init+0x14>
    166e:	1f 92       	push	r1
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62

// *****************************************************************************
static void spi_init(void){
 	
	// port configuration der mmc/sd/sdhc karte
	MMC_Direction_REG &=~(1<<SPI_MISO);         // miso auf input
    1674:	23 98       	cbi	0x04, 3	; 4
	MMC_Direction_REG |= (1<<SPI_Clock);      	// clock auf output
    1676:	21 9a       	sbi	0x04, 1	; 4
	MMC_Direction_REG |= (1<<SPI_MOSI);         // mosi auf output
    1678:	22 9a       	sbi	0x04, 2	; 4
	MMC_Direction_REG |= (1<<SPI_SS);			// chip select auf output
    167a:	20 9a       	sbi	0x04, 0	; 4

	// hardware spi: bus clock = idle low, spi clock / 128 , spi master mode
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    167c:	83 e5       	ldi	r24, 0x53	; 83
    167e:	8c bd       	out	0x2c, r24	; 44

	MMC_Write |= (1<<SPI_SS);       	// chip selet auf high, karte anwaehlen
    1680:	28 9a       	sbi	0x05, 0	; 5

	uint8_t cmd, ty, ocr[4];
	uint16_t n, j;
	uint8_t TimingDelay = 0;
	spi_init();
	mmc_disable();
    1682:	b2 df       	rcall	.-156    	; 0x15e8 <mmc_disable>
    1684:	04 e6       	ldi	r16, 0x64	; 100
    1686:	10 e0       	ldi	r17, 0x00	; 0

	for (n = 100; n; n--) spi_read_byte();    					// 80+ dummy clocks
    1688:	a8 df       	rcall	.-176    	; 0x15da <spi_read_byte>
    168a:	01 50       	subi	r16, 0x01	; 1
    168c:	11 09       	sbc	r17, r1
    168e:	e1 f7       	brne	.-8      	; 0x1688 <mmc_init+0x2e>
    1690:	04 e6       	ldi	r16, 0x64	; 100
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	f1 2c       	mov	r15, r1
    1696:	40 e0       	ldi	r20, 0x00	; 0

	ty = 0;
	j=100;
	do {
		if (mmc_send_cmd(CMD0, 0) == 1) {      					// Enter Idle state
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	ba 01       	movw	r22, r20
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	a7 df       	rcall	.-178    	; 0x15ee <mmc_send_cmd>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <mmc_init+0x4c>
    16a4:	66 c0       	rjmp	.+204    	; 0x1772 <mmc_init+0x118>
    16a6:	4a ea       	ldi	r20, 0xAA	; 170
			j=0;
			TimingDelay = 100;            						// Initialization timeout of 1000 msec

			if (mmc_send_cmd(CMD8, 0x1AA) == 1) {  				// SDv2?
    16a8:	51 e0       	ldi	r21, 0x01	; 1
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	88 e0       	ldi	r24, 0x08	; 8
    16b0:	9e df       	rcall	.-196    	; 0x15ee <mmc_send_cmd>
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <mmc_init+0x5e>
    16b6:	3b c0       	rjmp	.+118    	; 0x172e <mmc_init+0xd4>
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	5c 01       	movw	r10, r24
    16be:	6e 01       	movw	r12, r28
    16c0:	95 e0       	ldi	r25, 0x05	; 5
    16c2:	c9 0e       	add	r12, r25
    16c4:	d1 1c       	adc	r13, r1
    16c6:	85 01       	movw	r16, r10
				for (n = 0; n < 4; n++){
					ocr[n] = spi_read_byte();    				// Get trailing return value of R7 resp
    16c8:	88 df       	rcall	.-240    	; 0x15da <spi_read_byte>
    16ca:	f8 01       	movw	r30, r16
    16cc:	81 93       	st	Z+, r24
    16ce:	8f 01       	movw	r16, r30
    16d0:	ce 16       	cp	r12, r30
		if (mmc_send_cmd(CMD0, 0) == 1) {      					// Enter Idle state
			j=0;
			TimingDelay = 100;            						// Initialization timeout of 1000 msec

			if (mmc_send_cmd(CMD8, 0x1AA) == 1) {  				// SDv2?
				for (n = 0; n < 4; n++){
    16d2:	df 06       	cpc	r13, r31
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <mmc_init+0x6e>
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
					ocr[n] = spi_read_byte();    				// Get trailing return value of R7 resp
				}
				if (ocr[2] == 0x01 && ocr[3] == 0xAA) {         // The card can work at vdd range of 2.7-3.6V
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	09 f0       	breq	.+2      	; 0x16de <mmc_init+0x84>
    16dc:	3e c0       	rjmp	.+124    	; 0x175a <mmc_init+0x100>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	8a 3a       	cpi	r24, 0xAA	; 170
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <mmc_init+0x8c>
    16e4:	3a c0       	rjmp	.+116    	; 0x175a <mmc_init+0x100>
					while (TimingDelay) {  						// Wait for leaving idle state (ACMD41 with HCS bit)
						mmc_send_cmd(CMD55, 0);
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	ba 01       	movw	r22, r20
    16ec:	87 e3       	ldi	r24, 0x37	; 55
    16ee:	7f df       	rcall	.-258    	; 0x15ee <mmc_send_cmd>
						if(!mmc_send_cmd(ACMD41, 1UL << 30))
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e4       	ldi	r23, 0x40	; 64
    16f8:	89 e2       	ldi	r24, 0x29	; 41
    16fa:	79 df       	rcall	.-270    	; 0x15ee <mmc_send_cmd>
    16fc:	81 11       	cpse	r24, r1
    16fe:	f3 cf       	rjmp	.-26     	; 0x16e6 <mmc_init+0x8c>
    1700:	0e c0       	rjmp	.+28     	; 0x171e <mmc_init+0xc4>
					}

					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
							for (n = 0; n < 4; n++){
								ocr[n] = spi_read_byte();
    1702:	6b df       	rcall	.-298    	; 0x15da <spi_read_byte>
    1704:	f5 01       	movw	r30, r10
    1706:	81 93       	st	Z+, r24
    1708:	5f 01       	movw	r10, r30
    170a:	ce 16       	cp	r12, r30
							break;
					}

					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
							for (n = 0; n < 4; n++){
    170c:	df 06       	cpc	r13, r31
    170e:	c9 f7       	brne	.-14     	; 0x1702 <mmc_init+0xa8>
    1710:	89 81       	ldd	r24, Y+1	; 0x01
								ocr[n] = spi_read_byte();
							}
							ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // SDv2
    1712:	86 fd       	sbrc	r24, 6
    1714:	33 c0       	rjmp	.+102    	; 0x177c <mmc_init+0x122>
    1716:	68 94       	set
    1718:	ff 24       	eor	r15, r15
    171a:	f2 f8       	bld	r15, 2
    171c:	21 c0       	rjmp	.+66     	; 0x1760 <mmc_init+0x106>
						if(!mmc_send_cmd(ACMD41, 1UL << 30))
							break;
					}

					while(TimingDelay) {
						if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	ba 01       	movw	r22, r20
    1724:	8a e3       	ldi	r24, 0x3A	; 58
    1726:	63 df       	rcall	.-314    	; 0x15ee <mmc_send_cmd>
    1728:	81 11       	cpse	r24, r1
    172a:	f9 cf       	rjmp	.-14     	; 0x171e <mmc_init+0xc4>
    172c:	ea cf       	rjmp	.-44     	; 0x1702 <mmc_init+0xa8>
							break;
						}
					}
				}
			} else {        									// SDv1 or MMCv3
				if (mmc_send_cmd(ACMD41, 0) <= 1)   {
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	ba 01       	movw	r22, r20
    1734:	89 e2       	ldi	r24, 0x29	; 41
    1736:	5b df       	rcall	.-330    	; 0x15ee <mmc_send_cmd>
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	20 f0       	brcs	.+8      	; 0x1744 <mmc_init+0xea>
    173c:	ff 24       	eor	r15, r15
					ty = CT_SD1;
					cmd = ACMD41;  								// SDv1
				} else {
					ty = CT_MMC;
    173e:	f3 94       	inc	r15
    1740:	11 e0       	ldi	r17, 0x01	; 1
					cmd = CMD1;    								// MMCv3
    1742:	04 c0       	rjmp	.+8      	; 0x174c <mmc_init+0xf2>
						}
					}
				}
			} else {        									// SDv1 or MMCv3
				if (mmc_send_cmd(ACMD41, 0) <= 1)   {
					ty = CT_SD1;
    1744:	68 94       	set
    1746:	ff 24       	eor	r15, r15
    1748:	f1 f8       	bld	r15, 1
					cmd = ACMD41;  								// SDv1
    174a:	19 e2       	ldi	r17, 0x29	; 41
				} else {
					ty = CT_MMC;
					cmd = CMD1;    								// MMCv3
				}
				while (TimingDelay && mmc_send_cmd(cmd, 0));    // Wait for leaving idle state
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	ba 01       	movw	r22, r20
    1752:	81 2f       	mov	r24, r17
    1754:	4c df       	rcall	.-360    	; 0x15ee <mmc_send_cmd>
    1756:	81 11       	cpse	r24, r1
    1758:	f9 cf       	rjmp	.-14     	; 0x174c <mmc_init+0xf2>
			}
			if(ty != (CT_SD2 | CT_BLOCK)) {
    175a:	fc e0       	ldi	r31, 0x0C	; 12
    175c:	ff 16       	cp	r15, r31
    175e:	91 f0       	breq	.+36     	; 0x1784 <mmc_init+0x12a>
				while(TimingDelay && (mmc_send_cmd(CMD16, 512) != 0));
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	52 e0       	ldi	r21, 0x02	; 2
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e1       	ldi	r24, 0x10	; 16
    176a:	41 df       	rcall	.-382    	; 0x15ee <mmc_send_cmd>
    176c:	81 11       	cpse	r24, r1
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <mmc_init+0x106>
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <mmc_init+0x12a>
    1772:	01 50       	subi	r16, 0x01	; 1
			}
			if(!TimingDelay) ty = 0;
		} else { j--; }
    1774:	11 09       	sbc	r17, r1
	}while(j>0);
    1776:	09 f0       	breq	.+2      	; 0x177a <mmc_init+0x120>
    1778:	8e cf       	rjmp	.-228    	; 0x1696 <mmc_init+0x3c>
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <mmc_init+0x12a>
    177c:	0f 2e       	mov	r0, r31
    177e:	fc e0       	ldi	r31, 0x0C	; 12
    1780:	ff 2e       	mov	r15, r31
    1782:	f0 2d       	mov	r31, r0

	fat.card_type = ty;
    1784:	0d e3       	ldi	r16, 0x3D	; 61
    1786:	14 e0       	ldi	r17, 0x04	; 4
    1788:	f8 01       	movw	r30, r16
    178a:	f7 8a       	std	Z+23, r15	; 0x17
	mmc_disable();
    178c:	2d df       	rcall	.-422    	; 0x15e8 <mmc_disable>
    178e:	f8 01       	movw	r30, r16

	if( fat.card_type == 0 ){
    1790:	87 89       	ldd	r24, Z+23	; 0x17
    1792:	88 23       	and	r24, r24
    1794:	39 f0       	breq	.+14     	; 0x17a4 <mmc_init+0x14a>
    1796:	8c b5       	in	r24, 0x2c	; 44
#if (MMC_MAX_SPEED==TRUE)
// *****************************************************************************
static void spi_maxSpeed(){
	
	//SPI Bus auf max Geschwindigkeit
	SPCR &= ~((1<<SPR0) | (1<<SPR1));
    1798:	8c 7f       	andi	r24, 0xFC	; 252
    179a:	8c bd       	out	0x2c, r24	; 44
    179c:	8d b5       	in	r24, 0x2d	; 45
	SPSR |= (1<<SPI2X);
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8d bd       	out	0x2d, r24	; 45
    17a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	#if (MMC_MAX_SPEED==TRUE)
		spi_maxSpeed();
	#endif

	return TRUE;
    17a4:	0f 90       	pop	r0
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	08 95       	ret

000017c0 <mmc_write_sector>:
    17c0:	ff 92       	push	r15


// **********************************************************************************************************************************
// Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_write_sector (uint32_t addr,uint8_t *buffer){
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	8a 01       	movw	r16, r20

	uint8_t resp;
	uint8_t retrys;
	uint16_t count;
   	
	if ( !(fat.card_type & CT_BLOCK) ){
    17cc:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <fat+0x17>
    17d0:	23 fd       	sbrc	r18, 3
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <mmc_write_sector+0x26>
		addr *= 512;				// Convert to byte address if needed 
    17d4:	05 2e       	mov	r0, r21
    17d6:	59 e0       	ldi	r21, 0x09	; 9
    17d8:	66 0f       	add	r22, r22
    17da:	77 1f       	adc	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	5a 95       	dec	r21
    17e2:	d1 f7       	brne	.-12     	; 0x17d8 <mmc_write_sector+0x18>
    17e4:	50 2d       	mov	r21, r0
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
    17e6:	ab 01       	movw	r20, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	00 df       	rcall	.-512    	; 0x15ee <mmc_send_cmd>
    17ee:	f8 2e       	mov	r15, r24
    17f0:	81 11       	cpse	r24, r1
    17f2:	1e c0       	rjmp	.+60     	; 0x1830 <mmc_write_sector+0x70>
static uint8_t mmc_wait_ready (void){

	uint8_t TimingDelay = 50;

	do{
		if(	 spi_read_byte() == 0xFF ) return TRUE;
    17f4:	f2 de       	rcall	.-540    	; 0x15da <spi_read_byte>
    17f6:	8f 3f       	cpi	r24, 0xFF	; 255
    17f8:	e9 f7       	brne	.-6      	; 0x17f4 <mmc_write_sector+0x34>

	if ( FALSE == mmc_wait_ready() ){		
		return FALSE;
	}

	spi_write_byte(0xFE);			// Xmit data token 
    17fa:	8e ef       	ldi	r24, 0xFE	; 254
    17fc:	e9 de       	rcall	.-558    	; 0x15d0 <spi_write_byte>
    17fe:	e8 01       	movw	r28, r16
    1800:	1e 5f       	subi	r17, 0xFE	; 254
	
	count = 512;
	do {							// Xmit the 512 byte data block to MMC 
		spi_write_byte(*buffer++);		
    1802:	89 91       	ld	r24, Y+
    1804:	e5 de       	rcall	.-566    	; 0x15d0 <spi_write_byte>
    1806:	c0 17       	cp	r28, r16
	} while (--count);
    1808:	d1 07       	cpc	r29, r17
    180a:	d9 f7       	brne	.-10     	; 0x1802 <mmc_write_sector+0x42>
	
	spi_write_byte(0xFF);			// CRC (Dummy) 
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	e0 de       	rcall	.-576    	; 0x15d0 <spi_write_byte>
	spi_write_byte(0xFF);
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	de de       	rcall	.-580    	; 0x15d0 <spi_write_byte>
    1814:	c4 e1       	ldi	r28, 0x14	; 20
	
	retrys = 20;			
    1816:	e1 de       	rcall	.-574    	; 0x15da <spi_read_byte>
	do{
		resp = spi_read_byte();		// Reveive data response, 20 retrys if not acepted
    1818:	8f 71       	andi	r24, 0x1F	; 31
    181a:	85 30       	cpi	r24, 0x05	; 5
	}while( (resp & 0x1F) != 0x05 && --retrys);
    181c:	19 f0       	breq	.+6      	; 0x1824 <mmc_write_sector+0x64>
    181e:	c1 50       	subi	r28, 0x01	; 1
    1820:	d1 f7       	brne	.-12     	; 0x1816 <mmc_write_sector+0x56>
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <mmc_write_sector+0x72>
    1824:	cc 23       	and	r28, r28
	
	if ( retrys == 0){				// If not accepted, return with error 		
    1826:	29 f0       	breq	.+10     	; 0x1832 <mmc_write_sector+0x72>
    1828:	df de       	rcall	.-578    	; 0x15e8 <mmc_disable>
		return FALSE;
	}
	
	mmc_disable();
    182a:	ff 24       	eor	r15, r15
    182c:	f3 94       	inc	r15

	return TRUE;
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <mmc_write_sector+0x72>
    1830:	f1 2c       	mov	r15, r1
    1832:	8f 2d       	mov	r24, r15
	if ( !(fat.card_type & CT_BLOCK) ){
		addr *= 512;				// Convert to byte address if needed 
	}
	
	if ( mmc_send_cmd(CMD24, addr) != 0){ 	// enables card		
		return FALSE;
    1834:	df 91       	pop	r29
	}
	
	mmc_disable();

	return TRUE;
}
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	08 95       	ret

00001840 <mmc_read_sector>:
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17


// **********************************************************************************************************************************
// Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_read_sector (uint32_t addr,uint8_t *buffer){
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	8a 01       	movw	r16, r20

	uint8_t token;
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed
    184a:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <fat+0x17>
    184e:	23 fd       	sbrc	r18, 3
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <mmc_read_sector+0x24>
    1852:	05 2e       	mov	r0, r21
    1854:	59 e0       	ldi	r21, 0x09	; 9
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	5a 95       	dec	r21
    1860:	d1 f7       	brne	.-12     	; 0x1856 <mmc_read_sector+0x16>
    1862:	50 2d       	mov	r21, r0

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
    1864:	ab 01       	movw	r20, r22
    1866:	bc 01       	movw	r22, r24
    1868:	81 e1       	ldi	r24, 0x11	; 17
    186a:	c1 de       	rcall	.-638    	; 0x15ee <mmc_send_cmd>
    186c:	c8 2f       	mov	r28, r24
    186e:	81 11       	cpse	r24, r1
    1870:	11 c0       	rjmp	.+34     	; 0x1894 <mmc_read_sector+0x54>
		return FALSE;	
	}

	uint8_t TimingDelay = 20;
	do {							// Wait for data packet in timeout of 200ms 
		token = spi_read_byte();
    1872:	b3 de       	rcall	.-666    	; 0x15da <spi_read_byte>
    1874:	8f 3f       	cpi	r24, 0xFF	; 255
	} while ( (token == 0xFF) && TimingDelay );
    1876:	e9 f3       	breq	.-6      	; 0x1872 <mmc_read_sector+0x32>
    1878:	8e 3f       	cpi	r24, 0xFE	; 254
	
	if(token != 0xFE){
    187a:	69 f4       	brne	.+26     	; 0x1896 <mmc_read_sector+0x56>
    187c:	e8 01       	movw	r28, r16
    187e:	1e 5f       	subi	r17, 0xFE	; 254
		return FALSE;				// If not valid data token, retutn with error 
	}

	count = 512;
	do {							// Receive the data block into buffer 
		*buffer++ = spi_read_byte();
    1880:	ac de       	rcall	.-680    	; 0x15da <spi_read_byte>
    1882:	89 93       	st	Y+, r24
    1884:	c0 17       	cp	r28, r16
	} while (--count);
    1886:	d1 07       	cpc	r29, r17

	spi_read_byte();				// Discard CRC 
    1888:	d9 f7       	brne	.-10     	; 0x1880 <mmc_read_sector+0x40>
    188a:	a7 de       	rcall	.-690    	; 0x15da <spi_read_byte>
	spi_read_byte();
    188c:	a6 de       	rcall	.-692    	; 0x15da <spi_read_byte>
    188e:	ac de       	rcall	.-680    	; 0x15e8 <mmc_disable>

	mmc_disable();
    1890:	c1 e0       	ldi	r28, 0x01	; 1
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <mmc_read_sector+0x56>

	return TRUE;					// Return with success 
    1894:	c0 e0       	ldi	r28, 0x00	; 0
    1896:	8c 2f       	mov	r24, r28
	uint16_t count;
	
	if ( !(fat.card_type & CT_BLOCK) ) addr *= 512;	// Convert to byte address if needed

	if ( mmc_send_cmd(CMD17, addr) != 0 ){
		return FALSE;	
    1898:	df 91       	pop	r29
	spi_read_byte();

	mmc_disable();

	return TRUE;					// Return with success 
}
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <uputc>:


//***********************Funktionen**********************************
void uputc(uint8_t c){		//zeichen senden

	loop_until_bit_is_set(UCSRA,UDRE);	// warten bis puffer frei ist
    18a2:	e0 ec       	ldi	r30, 0xC0	; 192
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	90 81       	ld	r25, Z
    18a8:	95 ff       	sbrs	r25, 5
    18aa:	fd cf       	rjmp	.-6      	; 0x18a6 <uputc+0x4>
	UDR = c;								// zeichen schreiben
    18ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    18b0:	08 95       	ret

000018b2 <uputs>:
}	

//*******************************************************************
void uputs (uint8_t *s){		//string senden
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	ec 01       	movw	r28, r24
	
  while(*s) uputc(*s++);				//sendet zeichenkette, bis ende.. '\0'    
    18b8:	88 81       	ld	r24, Y
    18ba:	88 23       	and	r24, r24
    18bc:	29 f0       	breq	.+10     	; 0x18c8 <uputs+0x16>
    18be:	21 96       	adiw	r28, 0x01	; 1
    18c0:	f0 df       	rcall	.-32     	; 0x18a2 <uputc>
    18c2:	89 91       	ld	r24, Y+
    18c4:	81 11       	cpse	r24, r1
    18c6:	fc cf       	rjmp	.-8      	; 0x18c0 <uputs+0xe>
  
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <uinit>:


//*******************************************************************
void uinit (void){					//init usart Tx, 8n1 ,UDRE interupt enable

  UCSRC |= (3<<UCSZ0);    		// URSEL = 1 dann wird UCSRC benutzt sonst UBRRH ; UCSZ0=data register- 8bit; USBS stop bit 1 	
    18ce:	e2 ec       	ldi	r30, 0xC2	; 194
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	86 60       	ori	r24, 0x06	; 6
    18d6:	80 83       	st	Z, r24
  //Baudrate (high und low byte)
  UBRRH = (uint8_t)(UBRR_VAL>>8);
    18d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
  UBRRL = (uint8_t)UBRR_VAL;
    18dc:	88 e0       	ldi	r24, 0x08	; 8
    18de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UCSRB |= (1<<TXEN)|(1<<RXEN);  	// UART TX,RX einschalten,	data register empty interrupt enable,
    18e2:	e1 ec       	ldi	r30, 0xC1	; 193
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 61       	ori	r24, 0x18	; 24
    18ea:	80 83       	st	Z, r24
    18ec:	08 95       	ret

000018ee <_ZN5ServoC1Ev>:
		_errorlog = ErrorState::errorBattery;
		ErrorLog();

		return false;
	}
}
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	fc 01       	movw	r30, r24
    18f4:	11 a2       	std	Z+33, r1	; 0x21
    18f6:	10 a2       	std	Z+32, r1	; 0x20
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	82 a3       	std	Z+34, r24	; 0x22
    18fc:	13 a2       	std	Z+35, r1	; 0x23
    18fe:	a0 e8       	ldi	r26, 0x80	; 128
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	8c 91       	ld	r24, X
    1904:	82 60       	ori	r24, 0x02	; 2
    1906:	8c 93       	st	X, r24
    1908:	c1 e8       	ldi	r28, 0x81	; 129
    190a:	d0 e0       	ldi	r29, 0x00	; 0
    190c:	88 81       	ld	r24, Y
    190e:	88 61       	ori	r24, 0x18	; 24
    1910:	88 83       	st	Y, r24
    1912:	8c 91       	ld	r24, X
    1914:	80 6a       	ori	r24, 0xA0	; 160
    1916:	8c 93       	st	X, r24
    1918:	8f e3       	ldi	r24, 0x3F	; 63
    191a:	9c e9       	ldi	r25, 0x9C	; 156
    191c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    1920:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1924:	84 b1       	in	r24, 0x04	; 4
    1926:	80 66       	ori	r24, 0x60	; 96
    1928:	84 b9       	out	0x04, r24	; 4
    192a:	8f e6       	ldi	r24, 0x6F	; 111
    192c:	97 e1       	ldi	r25, 0x17	; 23
    192e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    1932:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
    1936:	af e6       	ldi	r26, 0x6F	; 111
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	8c 91       	ld	r24, X
    193c:	88 60       	ori	r24, 0x08	; 8
    193e:	8c 93       	st	X, r24
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 8b       	std	Z+17, r25	; 0x11
    1946:	80 8b       	std	Z+16, r24	; 0x10
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <_GLOBAL__sub_I_servo>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>


Servo servo;
    194e:	8f e0       	ldi	r24, 0x0F	; 15
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	cd cf       	rjmp	.-102    	; 0x18ee <_ZN5ServoC1Ev>
    1954:	08 95       	ret

00001956 <_ZN6myUartC1Ev>:
 * \return void
 */
void myUart::write(double d, uint8_t precision /*= 2*/, bool linefeed /*= false*/) {
	char s[12];
	write(dtostrf(d, 9, precision, s), linefeed);
}
    1956:	23 e3       	ldi	r18, 0x33	; 51
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	31 83       	std	Z+1, r19	; 0x01
    195e:	20 83       	st	Z, r18
    1960:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1964:	80 81       	ld	r24, Z
    1966:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    196a:	e2 ec       	ldi	r30, 0xC2	; 194
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	86 60       	ori	r24, 0x06	; 6
    1972:	80 83       	st	Z, r24
    1974:	08 95       	ret

00001976 <_GLOBAL__sub_I_uart>:


#include "myUart.h"


myUart uart;
    1976:	87 e3       	ldi	r24, 0x37	; 55
    1978:	94 e0       	ldi	r25, 0x04	; 4
    197a:	ed cf       	rjmp	.-38     	; 0x1956 <_ZN6myUartC1Ev>
    197c:	08 95       	ret

0000197e <_ZN6usonicC1Ev>:
		//uart.write((long)measureDistances[i]);
	}
	
	return averageValue / (highIndex - lowIndex);

}
    197e:	fc 01       	movw	r30, r24
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 83       	st	Z, r24
    1984:	11 82       	std	Z+1, r1	; 0x01
    1986:	13 82       	std	Z+3, r1	; 0x03
    1988:	12 82       	std	Z+2, r1	; 0x02
    198a:	57 9a       	sbi	0x0a, 7	; 10
    198c:	5f 98       	cbi	0x0b, 7	; 11
    198e:	e3 e7       	ldi	r30, 0x73	; 115
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	80 83       	st	Z, r24
    1998:	84 eb       	ldi	r24, 0xB4	; 180
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    19a0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    19a4:	e9 e6       	ldi	r30, 0x69	; 105
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 64       	ori	r24, 0x40	; 64
    19ac:	80 83       	st	Z, r24
    19ae:	08 95       	ret

000019b0 <_GLOBAL__sub_I_uSonic>:

#include "../general.h"
#include "../usart/myUart.h"
#include <util/delay.h>

usonic uSonic;
    19b0:	89 e3       	ldi	r24, 0x39	; 57
    19b2:	94 e0       	ldi	r25, 0x04	; 4
    19b4:	e4 cf       	rjmp	.-56     	; 0x197e <_ZN6usonicC1Ev>
    19b6:	08 95       	ret

000019b8 <__udivmodsi4>:
    19b8:	a1 e2       	ldi	r26, 0x21	; 33
    19ba:	1a 2e       	mov	r1, r26
    19bc:	aa 1b       	sub	r26, r26
    19be:	bb 1b       	sub	r27, r27
    19c0:	fd 01       	movw	r30, r26
    19c2:	0d c0       	rjmp	.+26     	; 0x19de <__udivmodsi4_ep>

000019c4 <__udivmodsi4_loop>:
    19c4:	aa 1f       	adc	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	ee 1f       	adc	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	a2 17       	cp	r26, r18
    19ce:	b3 07       	cpc	r27, r19
    19d0:	e4 07       	cpc	r30, r20
    19d2:	f5 07       	cpc	r31, r21
    19d4:	20 f0       	brcs	.+8      	; 0x19de <__udivmodsi4_ep>
    19d6:	a2 1b       	sub	r26, r18
    19d8:	b3 0b       	sbc	r27, r19
    19da:	e4 0b       	sbc	r30, r20
    19dc:	f5 0b       	sbc	r31, r21

000019de <__udivmodsi4_ep>:
    19de:	66 1f       	adc	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	1a 94       	dec	r1
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <__udivmodsi4_loop>
    19ea:	60 95       	com	r22
    19ec:	70 95       	com	r23
    19ee:	80 95       	com	r24
    19f0:	90 95       	com	r25
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	bd 01       	movw	r22, r26
    19f8:	cf 01       	movw	r24, r30
    19fa:	08 95       	ret

000019fc <__umulhisi3>:
    19fc:	a2 9f       	mul	r26, r18
    19fe:	b0 01       	movw	r22, r0
    1a00:	b3 9f       	mul	r27, r19
    1a02:	c0 01       	movw	r24, r0
    1a04:	a3 9f       	mul	r26, r19
    1a06:	70 0d       	add	r23, r0
    1a08:	81 1d       	adc	r24, r1
    1a0a:	11 24       	eor	r1, r1
    1a0c:	91 1d       	adc	r25, r1
    1a0e:	b2 9f       	mul	r27, r18
    1a10:	70 0d       	add	r23, r0
    1a12:	81 1d       	adc	r24, r1
    1a14:	11 24       	eor	r1, r1
    1a16:	91 1d       	adc	r25, r1
    1a18:	08 95       	ret

00001a1a <__muluhisi3>:
    1a1a:	f0 df       	rcall	.-32     	; 0x19fc <__umulhisi3>
    1a1c:	a5 9f       	mul	r26, r21
    1a1e:	90 0d       	add	r25, r0
    1a20:	b4 9f       	mul	r27, r20
    1a22:	90 0d       	add	r25, r0
    1a24:	a4 9f       	mul	r26, r20
    1a26:	80 0d       	add	r24, r0
    1a28:	91 1d       	adc	r25, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	08 95       	ret

00001a2e <__tablejump2__>:
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	88 1f       	adc	r24, r24
    1a34:	8b bf       	out	0x3b, r24	; 59
    1a36:	07 90       	elpm	r0, Z+
    1a38:	f6 91       	elpm	r31, Z
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	19 94       	eijmp

00001a3e <toupper>:
    1a3e:	91 11       	cpse	r25, r1
    1a40:	08 95       	ret
    1a42:	81 56       	subi	r24, 0x61	; 97
    1a44:	8a 51       	subi	r24, 0x1A	; 26
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <toupper+0xc>
    1a48:	80 52       	subi	r24, 0x20	; 32
    1a4a:	85 58       	subi	r24, 0x85	; 133
    1a4c:	08 95       	ret

00001a4e <strcat>:
    1a4e:	fb 01       	movw	r30, r22
    1a50:	dc 01       	movw	r26, r24
    1a52:	0d 90       	ld	r0, X+
    1a54:	00 20       	and	r0, r0
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <strcat+0x4>
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	0d 92       	st	X+, r0
    1a5e:	00 20       	and	r0, r0
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <strcat+0xc>
    1a62:	08 95       	ret

00001a64 <strncpy>:
    1a64:	fb 01       	movw	r30, r22
    1a66:	dc 01       	movw	r26, r24
    1a68:	41 50       	subi	r20, 0x01	; 1
    1a6a:	50 40       	sbci	r21, 0x00	; 0
    1a6c:	48 f0       	brcs	.+18     	; 0x1a80 <strncpy+0x1c>
    1a6e:	01 90       	ld	r0, Z+
    1a70:	0d 92       	st	X+, r0
    1a72:	00 20       	and	r0, r0
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <strncpy+0x4>
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <strncpy+0x16>
    1a78:	1d 92       	st	X+, r1
    1a7a:	41 50       	subi	r20, 0x01	; 1
    1a7c:	50 40       	sbci	r21, 0x00	; 0
    1a7e:	e0 f7       	brcc	.-8      	; 0x1a78 <strncpy+0x14>
    1a80:	08 95       	ret

00001a82 <_exit>:
    1a82:	f8 94       	cli

00001a84 <__stop_program>:
    1a84:	ff cf       	rjmp	.-2      	; 0x1a84 <__stop_program>
